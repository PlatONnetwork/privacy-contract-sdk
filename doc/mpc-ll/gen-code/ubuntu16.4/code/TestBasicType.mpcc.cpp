#ifndef PLATON_MPCC_CPP
#define PLATON_MPCC_CPP

#include <platon/platon.hpp>
#include <stdio.h>
#include <stdlib.h>
#include <string>

namespace mpc {

#define COMMON_SPLIT_CHAR "&"
#define OWNER "__OWNER__"

#define PREFIX "__MPC__"
#define PREFIX_BONUS_RULE "__BONUS_RULE__"

#define KEY_IR "__IR__"
#define KEY_PARTIES PREFIX "__PARTIES__"
#define KEY_URLS PREFIX "__URLS__"
#define KEY_INVITORS PREFIX "__INVITOR__"
#define KEY_TASK_INFO PREFIX "__TASK__"
#define KEY_METHOD_PRICE PREFIX "__METHOD_PRICE__"

/// IR data -> IR_VALUE_TEMPLATE
#define IR_VALUE "4243c0de3514000005000000620c30244959bea6eed37e2d4401320500000000210c00000e0d00000b02210002000000130000000781239141c80449061032399201840c250508191e048b62801c450242920b42e41032143808184b0a32728848901420434688a50019324204490e909123c4504151818ce183e58a0439460651180000c90100001bd426f8ffffffff0170803200c280188777900779288771a00776c88736908777a80777208772208736208774b08774208772688379880779a0873630077868837608077a4007c01cc2811de6a11c00821cd2611ec2411cd8a11cda801ec2211dd8a10dc6211cd8811de60130877060877928078060877298877968037890877218877498877268037380877608077200cc211cd8611eca0120dce11ddac01ce4211cdaa11cda001ede211ddc811eca411edaa01cd8211dda01a00779a88772000677788736300779088776288736808777480777a0877290873628077648877668037778077768037628877030078070877768837470077398873630077868837608077a4007c01cc2811de6a11c00c21ddea10dd4a11eda011eda801ec2411cd8a11ce60130877060877928078070877768037708077798873630077868837608077a4007c01cc2811de6a11c00c21ddea10de6211dcec11dca811cda401fca411ede611edac01ce0a10dda211ce8011d0073080776988772000877788736a0077908077880877470877368837608077a4007c01cc2811de6a11c00621ee8211cc6611dda001ee4e11de8a11cc6811ede411eda401ceac11ccca11ce4a10de6211df4a11c003c00087a080779388772a08736180778a807001ff0c00edac00ee80020e8211ce4e11cca811edac01cca211ce8a11ee4a11ce601580373c0877990073658837668077c60833598877928073658837998877290033658037cc0833b00887a70877908077328873630077868837608077a4007c01cc2811de6a11c00a21ee6a11cda601edec11ce8a10dcc811dde211ce80130877060877928076003210080186c7099e1ffffffff07621cde411ee4a11cc6811ed8211fda401edea11edc811cca811cda801cd2c11ed2811ccaa10de6211ee4811edac01ce0a10dda211ce8011d007308077698877200087248877908077160877268037a0887746087361887706007769807c01cc2811de6a11c00821dca611ee6a10de0411eca611cd2611ecaa10dcc011eda211cc80130877060877928078070877768037390877068877268037878877470077a2807796883726087746807801ee4a11eca0118dce11ddac01ce4211cdaa11cda001ede211ddc811eca411edaa01cd8211ddaa10ddce11ddca10dd8a11cc2c11c00c21ddea10dd2c11dcc611edac01ce0a10dda211ce8011d0073080776988772000877788736708770708779680373808736688770a0077400cc211cd8611eca0120dce11dda601ed2e11cdca11cc8a10df4a11ce4e11de6a10dcc011edaa01dc2811ed00130877060877928078070877768037a908770800778480777388736688770a0077400cc211cd8611eca0120e6811ec2611cd6a10de0411ede811eca611ce8e11de4a10dc4a11eccc11cca411eda601ed2411fca01c00380a0877090877328077a68837180877a00f0010feca00dec800e00821ec2411ecea11ce8a10dcca11cc2811eea411eca611e803530077c980779608335688776c00736588379988772608335988779280739608335c0073cb80380a80777988770308772680373808736688770a0077400cc211cd8611eca0120ea611ecaa10de6e11dcc811edac01cd8e11dc2811e00730807769887720036148410a401b1812802a0db5018439006d0069839feffffff7f0024621cde411ee4a11cc6811ed8211fda401edea11edc811cca811cda801cd2c11ed2811ccaa10de6211ee4811edac01ce0a10dda211ce8011d007308077698877200087248877908077160877268037a0887746087361887706007769807c01cc2811de6a11c00821dca611ee6a10de0411eca611cd2611ecaa10dcc011eda211cc80130877060877928078070877768037390877068877268037878877470077a2807796883726087746807801ee4a11eca0118dce11ddac01ce4211cdaa11cda001ede211ddc811eca411edaa01cd8211ddaa10ddce11ddca10dd8a11cc2c11c00c21ddea10dd2c11dcc611edac01ce0a10dda211ce8011d0073080776988772000877788736708770708779680373808736688770a0077400cc211cd8611eca0120dce11dda601ed2e11cdca11cc8a10df4a11ce4e11de6a10dcc011edaa01dc2811ed00130877060877928078070877768037a908770800778480777388736688770a0077400cc211cd8611eca0120e6811ec2611cd6a10de0411ede811eca611ce8e11de4a10dc4a11eccc11cca411eda601ed2411fca01c00380a0877090877328077a68837180877a00f0010feca00dec800e00821ec2411ecea11ce8a10dcca11cc2811eea411eca611e803530077c980779608335688776c00736588379988772608335988779280739608335c0073cb80380a80777988770308772680373808736688770a0077400cc211cd8611eca0120ea611ecaa10de6e11dcc811edac01cd8e11dc2811e0073080776988772003610480088c10622110031d86028019000dd866211823400830d0533046900061b8a0608d2000c3610ceffffffff0f80040000491800000e00000013844098100c13848198300c853121382604c104221090640211280b3341189609c3d02c130262825018130267c2502ccc84609920340b00892000008d0000003222c809206485049323a484049323e384a19014124c8e8c0b84e44c10b0c31c019216000ae4028006b901a0425e00e8901c004a64038016e901a0460a00e89109008a640780267304c11c011894a162b1d0a50616ca10a00a960d714600e60840611841f86672c6811dc2611ee6c10dcaa11de0410ff44014d2811e5000a2d04cd238b04338ccc33cb84139b4033ce8811ea4823bd043399c4339c803122c221a91a5101e52c942a64278482412a1caf021594855040f895865b0582ce49a0128030c06a358192a950acd66228779a00779a88771a0073798077a20073dd0835ff88571c0077c888338d0033d10877098877418875f98077a908774708773e08371408770900736008379a00772d0033d180774080779f8057a90877048077a98073e180774080779f00336008379a00772d0033d080776608777188770a0877790073e180774080779f00330f0033dd0835f08057660877718875f4087742087729007146c1201700ad5204ee3038dd320e1639b090cc6811dc2611ee6c10de6811ec8410ff4e0177e611cf0011fe2200ef4400fc4211ce6211dc6e117e6811ee4211ddce11cd050fbdc0857084f2e97235d113639e215c193235f193cb91c01cb90cbe5485808cbc6b22162212c1b4b858c85b06c2c254216c2b2b15848499f4258361626350b61d9583ef42458212c1b4b94a485b06c2c30a20e0190b510968de54ad8425836162b690b61d95872c42dc22747de226c3e04a64d212c627189c645f06ca84c9581802900236c2c9403000000630680158209183ee0811dfc821dd0411bd4833bac833bbcc33db8431bb0433ab8433de0431b9c833bd4c3863228873668073d28873648073ba0033db0033a680373c00338d0833890033c680377c0033d88033bd0833990033db0033a688359880339c003a5078408492143468a84001a210c6b30ce402dc40e88158860388724000020000000007640b0d00d033a2401000001000000b0036a07a318d42109000008000000801dd03ca4c131ac4312000010000000003b209e3092811d9200008000000000d80189c5b70cef9004000004000000c00e28348c66d88724000020000000007640a7613c833f2401000001000000b0036a8d6f19e02109000008000000801d107b18cff00f4900004000000000ec80e4e35b8678480200000200000060071423c633804412000010000000003ba01bf996411e9200008000000000d801d989f10c219104000004000000c00e884fbe65988724000020000000007640bb623c83482401000001000000b0030a976f19e82109000008000000801d10c818cf30124900004000000000ec804ce65b867a480200000200000060075436c733904412000010000000003b20b6f996c11e9200008000000000d801adcef10c259104000004000000c00e48768e64688724000020000000007640b9f32dc33d2401000001000000b003c29fa319f82109000008000000801dd0ff7ccb800f4900004000000000ec807ce85b867c48020000020000006007d447df32e84312000010000000003b205ed2a2c1249200008000000000d801d9d3d10cfd9004000004000000c00ea89f8e6470872400002000000000764024450bc3900e4900004000000000ec8070eb98869348020000020000006088f45bd005004000000000000000a00430447a2f2a030200000000000000000060883462060704800000000000000000c01029c52c3300026000000008000000006088f463181a00014000000000000000003044ba334f0d80001000000000000000001822d5dac40640001400000001000000000c91d08dbb00000800000000000000940086482427b9010000060000000000008012c010c9e6303400028000000000000000006088e476921b0000600000000000000028010c91404f720300000c0000000000000025802192ec61680004000100000000000000c01049fd24370000c00000000000000050021822f11f860640001000000000000000000c91683090dc0000000300000000000040096088648601860640001000000000000000000c91fc3090dc0000000300000000000040096088048b01860640001000000000000000000c91d03190dc0000000300000000000040096088a48f01860640001000000000000000000c91643290dc0000000300000000000040096088449601860640001000000000000000000c91f83290e200000003000000000000008021926b06521c0000600000000000000000304402cf408a0300000c00000000000000008648f21948710000800100000000000000c010894483660e00003800000000000000001822c568700a7a00000002000000000000a0043044c2d5c00ff80008800200000000000000802112c00a7a00001302000000004000a0043044b2d9200ffc00088002000020000000008021d2eb067d000a40002400000001000000000c91583810055100024001000000000000006088e4cac1420a40000000000000000000000c917239604c010800000000000000000080215239070d2a0001000000000000000000304492e7c0510520000000000000000000008648201d34ad0004000000000000000000c010a9a503e71580000000000000000000001822ed74c0c802100000000000000000000043a4b30e1a5a0002000000000000000000608844d741830b40000000000000000000000c91423b707401080000000000000000008021d26b070d2f00010000000000000000003044e2edc0e10520000000000000000000008648ea1de4811f000100000000000000000030441af3e00f7c0108000000000000000000802192b80706380001000000000000000000304442f7e01a0700000000000000000000008648ff1e8cc1380000000000000000000000304412fb201b07000000000000000000000086487b1f64e30000000000000000000000c01089f6836c1c00000000000000000000001822b57f908d03000000000000000000000043241314b27100000000000000000000006088f48342360e00000000000000000000000c91f050c8c601000000000000000000008021522c0ad938000000000000000000000030445247211b0700000000000000000000008648232964e30000000000000000000000c0108927856c1c00000000000000000000001822d5a5908d0300000000000000000000004324d714aa7100000000000000000000006088349ec2350e00000000000000000000000c91f45388ca01000000000000000000008021d28a0a4439000100000000000000000020b141a0b03d030040160800000070000000321e982019114c908c092647c60443b29440215040abd21c1464a7c7651da8440609df621da84456d06015ce611e2022348358a525a4899d22a431a8a05a690e9297e775361dd50bb2d3e3724bf816a774a012594187b564c0319165419c064022424a232758088612ba95e6a0b41b5ea78382ecf4b8ac0395c820e15bac0395c80add4a7350da0dafd34141767a5cd6814a6690f02dd6814a66856ea53928ed86d7e9a0203b3d2eeb40a53948f816eb40a5b98216cbb4843489cd74dbda302cd312d22436d36db354b04c4b4893d84cb76d52cb322d214d6233dd768754cbb4843489cd74dba6332cd312d22436d36d6bcdb04c4b4893d84cb78d46d1322d214d6233ddb6e744cbb484347d8b034cda302cd312d2f42d0e30b154b04c4b48d3b738c06452cb322d214ddfe200538754d4d0ae3407c9cbf33a9b8eea05d9e97119549a83846f714a072a9115da95e62079795e67d351bd203b3d2e834a7390f02d4ee94025b342bbd21c242fcfeb6c3aaa1764a7c76590c90412bec5291da84456d0438395062d0d541abc34286960d280af8197228bb484346d8eb3d044b9d21c242fcfeb6c3aaa1764a7c765d00a247c8b533a5069aea08dad4684ce230000b1180000740000003308801cc4e11c6614013d88433884c38c4280077978077398710ce6000fed100ef4800e330c421ec2c11dcea11c6630053d88433884831bcc033dc8433d8c033dcc788c7470077b08077948877070077a700376788770208719cc110eec900ee1300f6e300fe3f00ef0500e3310c41dde211cd8211dc2611e6630893bbc833bd04339b4033cbc833c84033bccf0147660077b680737688772680737808770908770600776280776f8057678877780875f08877118877298877998812ceef00eeee00ef5c00eec300362c8a11ce4a11ccca11ce4a11cdc611cca211cc4811dca6106d6904339c84339984339c84339b8c33894433888033b94c32fbc833cfc823bd4033bb0c30cc7698770588772708374680778608774188774a08719ce530fee000ff2500ee4900ee3400fe1200eec500e3320281ddcc11ec2411ed2211cdc811edce01ce4e11dea011e66185138b0433a9c833bcc50247660077b68073760877778077898514cf4900ff0500e331e6a1eca611ce8211ddec11d7e011ee4a11ccc211df0610654858338ccc33bb0433dd04339fcc23ce4433b88c33bb0c38cc50a877998877718877408077a28077298815ce3100eecc00ee5500ef33023c1d2411ee4e117d8e11dde011e00000000792000003c000000621e482043880c19391924909140c6c8c86822500814329e18192147c89051148898000023a10000636c616e672076657273696f6e20362e302e312028746167732f52454c454153455f3630312f66696e616c292028676974403139322e3136382e392e36363a506c61744f4e2f706c61746f6e2d636f6d70696c65722e67697420643637373763633130363134353731316137656439613335343538386566666262623135363034652977636861725f73697a65000000230816398c2058e5304310cc300c02212381094a858dcdaecd258daccc8d6e9480c8888dcdaecda5ed8dac8eadccc58c2dec6c6e94a00000a91800000b0000000b0a7228877780077a587098433db8c338b04339d0c382e61cc6a10de8411ec2c11de6211de8211ddec11d00d11000000600000007cc3ca4833b9c033b94033da0833c94433890c301000000612000005f00000013044b2c100000000a0000006419012802da0c750c4460ad84b512431d8100582b61adc450476108d64a582b41ea190000000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10083400c306c4f10c0021964188658c182000088201870f8d23042306c70282606006f8902c78304db28020121466800f88024d9330208808061adc039120d320000822c3a106f64044175860c4a06840100cd8e01e8c6103e20806800ecb9826014010210c8e1f2029a0c432861b02eb0c460c8a0604c1800df6c11931281a10040336d88727837983411d0260342100860d88272080d104211836209e60006609927983411d0260342100860d08292080d10421183620a460006609907983411d0260342100860d882a2080d10421183620aa6000460c8a0604c1800d48629a2540460c8a0604c1800d48e29a2548460c8a0604c1800d48029b2550c8da10b22c63b6a11380d9864008e60c820000612000005f00000013044b2c100000000a0000006419012802da0c751cc860ad84b512431d8100582b61adc450476108d64a582b41ea190000000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10083400c306c4f10c0021964188658c182000088201870f8d23042306c70282606006f8902c78304db28020121466800f88024d9330208808061adc039120d320000822c3a106f64044175860c4a06840100cd8e01e8c6103e20806800ecb9826014010210c8e1f2029a0c432861b02eb0c460c8a0604c1800df6c11931281a10040336d88727837983411d0260342100860d88272080d104211836209e60006609927983411d0260342100860d08292080d10421183620a460006609907983411d0260342100860d882a2080d10421183620aa6000460c8a0604c1800d48629a2540460c8a0604c1800d48e29a2548460c8a0604c1800d48029b2550c8da10b22c63b6a11380d9864008e60c820000612000006000000013044b2c100000000c0000006419012802da0c752c4c61ad84b512431d8942582b61adc45047e318d64a582b31d4f14087b512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061acc039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c62ad84b512431d8942582b61adc45047e318d64a582b31d4f14089b512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061ae0039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c8c62ad84b512431d8942582b61adc45047e318d64a582b31d4f1408bb512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061ac0039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c63ad84b512431d8942582b61adc45047e318d64a582b31d4f1408db512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061ab8039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c8c63ad84b512431d8942582b61adc45047e318d64a582b31d4f1408fb512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061ab0039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c64ad84b512431d8942582b61adc45047e318d64a582b31d4f14091b512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061aa8039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c8c64ad84b512431d8942582b61adc45047e318d64a582b31d4f14093b512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061aa0039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c65ad84b512431d8942582b61adc45047e318d64a582b31d4f14095b512d64a907a0600000000331196450ea330136159e4300a33116360910329cc448c81450ea43013b159e4000a331196450ea030136159e4300a331163609103290c1b10483400c306c4010d0021964188658c182000088201970fce23042306c70282606006f9902c79304db28020121466900f88124d9330208808061a98039120d320000822c3a106f74048175860c4a06840100cd8001f8c6103e20806800ecb9846014010210cae1fa2090a28b18c1183a201413060837d68460c8a0604c1800df6c1c960de60508700184d08806103c2090860344108860d08271880598264de60508700184d08806103220a0860344108860d88281880590264de60508700184d08806103820a0860344108860d082a18801183a2014130600392906609901183a2014130600392b06609921183a2014130600392b8660914aa36842acb986de00460b6211082398320000061200000250000001304412c100000000b000000641901a0cd50c7c25cd64a582b31d4912896b512d64a0c75340e66ad84b512431d0f74582b61ad04000000003311706091c328cc44c081450ea33013010716398cc2b001312803306c4008c900d0001b17589108d8b8c08a230608008260c0d183b20c0121b041086c9410c0b00191040340096c5c60c5110304004130e0f4e1899c8018d8c8000061200000250000001304412c100000000b000000641901a0cd50c7c264d64a582b31d4912896b512d64a0c75340e66ad84b512431d0f94582b61ad04000000003311706091c328cc44c081450ea33013010716398cc2b001312803306c4008c900d0001b17589108d8b8c08a230608008260c0d183b20c0121b041086c9410c4b00191040340096c5c60c5110304004130e0f4e1899c8018d8c8000061200000250000001304412c100000000b000000641901a0cd50c7c268d64a582b31d4912896b512d64a0c75340e66ad84b512431d0fb4582b61ad04000000003311706091c328cc44c081450ea33013010716398cc2b001312803306c4008c900d0001b17589108d8b8c08a230608008260c0d183b20c0121b041086c9410c8b00191040340096c5c60c5110304004130e0f4e1899c8018d8c8000061200000250000001304412c100000000b000000641901a0cd50c7c26cd64a582b31d4912896b512d64a0c75340e66ad84b512431d0fd4582b61ad04000000003311706091c328cc44c081450ea33013010716398cc2b001312803306c4008c900d0001b17589108d8b8c08a230608008260c0d183b20c0121b041086c9410d0b00191040340096c5c60c5110304004130e0f4e1899c8018d8c80000612000002b0000001304432c100000000900000054190120cb08006d863a2289b358c26289a18e44212c96b05862a8a3713a8b252c960000331180450ea130130158e4100a331180450ea1700a20860d082208805300316c401041005001081754e0024bd001081754e0024b8c182000088201870f8d4304c400c2051598650884801a40b8a002b304c24045a50680105c00886103020a02802040b8a002175862c4e00040100c3891b0b0802840b8a00219000061200000430000001304462c100000000b000000541901a801b28c00d066a863203ecb252c9718ea4814cf7209cb25863a260a0c2c97b05c82d433000000000033117960910329cc44e481450ea430135159e4100a33119b450ea030136159e4000ac30644e110c0b00141340440458e8c18140d0882011fec4240468e8c18140d0882011ff442306280002008065c3e30cd100c1b10481400a4e4082939326270382008067a000e96108c18140d0882011f8483354d02802012085c3f3c51306c40305400105309b30cc410cc1b0cea1000a30901306c403801018c2608c1b001e10403306250342008067e500edc2c41316250342008067e500edc2c0181f46c083d9631db5009c06c43200473064100000000612000002f0000001304462c1000000003000000541901a80152cf000000000033117960910329cc44e481450ea430135159e4100a33119b450ea030136159e4000ac30644a110c0b001412404306c400c48005091232306c6038260000ab4c00454e4c834080482482088022d34c1b001612801404625cc321043306f30a843008c2604c0b001810404309a2004c30604120cc08841d1802018f8c12e48b304c58841d1802018f8c12e48b3040452b2219458c66cc32300b30d8110cc1904010000000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab6300405191630626000200806173f20c188410180201880432b40c306841500c088c10180201898c22e0492901300000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab6300405191630626000200806573d20c188410180201880432b40c306841500c088c10180201898c22e0492901300000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066e400f4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066e200f4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066e100f4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066ef00e4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066ed00e4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066eb00e4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066e900e4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196450ea0b036824150b001cb221c06051630627000200806a8f00a4350906101331196450ea0b036423307146cc0b2084e1d506001230607008260800ab63004051916306260002008066e700e4830625000200806e0d00ad0b00161050030627000200806aa900b8124e404000061200000220000001304412c10000000030000006419012820fa14100000000033117060910328ac8d6010146cc0b208874181058c181c000882812cacc2101464c0c04c041c58e4000a6b23347340c1062c8be0d401051630627000200806b2200b43509001032306060082601007e58004230605008260000ead000d1b10560000230607008260400bb51048424e0061200000220000001304412c10000000030000006419012820fa14100000000033117060910328ac8d6010146cc0b208874181058c181c000882812cacc2101464c0c04c041c58e4000a6b23347340c1062c8be0d401051630627000200806b2200b43509001032306060082601007e48004230605008260000ead000d1b10560000230607008260400bb51048424e0061200000220000001304412c10000000030000006419012820fa14100000000033117060910328ac8d6010146cc0b208874181058c181c000882812cacc2101464c0c04c041c58e4000a6b23347340c1062c8be0d401051630627000200806b2200b43509001032306060082601007e38004230605008260000ead000d1b10560000230607008260400bb51048424e0061200000220000001304412c10000000030000006419012820fa14100000000033117060910328ac8d6010146cc0b208874181058c181c000882812cacc2101464c0c04c041c58e4000a6b23347340c1062c8be0d401051630627000200806b2200b43509001032306060082601007e28004230605008260000ead000d1b10560000230607008260400bb51048424e0061200000230000001304412c10000000030000006419012820fa141000000000331180450ea0b036824150b001cb221c06051630627000200806a4100b43509001001754602602b0c80114d64670e880820d5816e1b1030a2c60c4e00040100c48211786a02003002ea8c0888101802018ccc13824c188410180201880c32b48c306041600c088c10180201898422f049490150061200000340000001304412c10000000030000006419012820fa94000000000033117860910328cc44e081450ea0306250002008067e200ac1da084741c1062c8b801c1458c088c101802018f0022a0c4131138107163980c2884101802018f8012a046b23347340c1062c8be0d401051630627000200806bce00a43508c181c000882811efc42c318230605008260e00bacd054f0c088410180201880432b04c306841500c088c101802018f0422c0412748305460c0a0004c1c00fc2411a3128001004033f088768c4a00040100cfc201c960c0000000061200000040000001304c188410184201894c31904080000712000001f000000320e102284218c0b88d2be8029ce0cb802db802c920ee842ef8030d60f28830b81349a1168c31f8138de12985338813aac13b8333d813cfa13d8734a813fec1428d5598153c11548555e8155891668d56a8157d11688556f81599917a8d57b815be117c85588815da918e8d58c815ff1180856998161ba1928069f0100000000650c000071020000120394782b000000010000000f09000011000000440000000100000050000000010000005800000064000000b80900000000000020090000180000003809000006000000130c000000000000000000006400000000000000000000004c000000df02000010000000df02000010000000ffffffff00240000ef02000014000000ef02000014000000ffffffff0824000003030000060000000303000006000000ffffffff0824000009030000160000000903000016000000ffffffff083400001f030000180000001f03000018000000ffffffff08240000370300001e000000370300001e000000ffffffff0824000055030000130000005503000013000000ffffffff08340000680300001c000000680300001c000000ffffffff0024000084030000120000008403000012000000ffffffff0024000096030000180000009603000018000000ffffffff08240000ae03000012000000ae03000012000000ffffffff00240000c003000012000000c003000012000000ffffffff00240000d203000018000000d203000018000000ffffffff08240000ea03000012000000ea03000012000000ffffffff00240000fc03000018000000fc03000018000000ffffffff0824000014040000120000001404000012000000ffffffff0024000026040000180000002604000018000000ffffffff082400003e040000120000003e04000012000000ffffffff0024000050040000180000005004000018000000ffffffff0824000068040000120000006804000012000000ffffffff002400007a040000180000007a04000018000000ffffffff0824000092040000120000009204000012000000ffffffff00240000a404000018000000a404000018000000ffffffff08240000bc04000012000000bc04000012000000ffffffff00240000ce04000012000000ce04000012000000ffffffff00240000e004000012000000e004000012000000ffffffff00240000f204000012000000f204000012000000ffffffff00240000040500000d000000040500000d000000ffffffff0024000011050000470000001105000047000000ffffffff00240000580500003e000000580500003e000000ffffffff08240000000000004c000000000000004c000000000000001024000096050000390000009605000039000000ffffffff08340000cf0500003d000000cf0500003d000000ffffffff083400000c060000420000000c06000042000000ffffffff082400004e0600000b0000004e0600000b000000ffffffff08240000590600000c000000590600000c000000ffffffff08240000650600000d000000650600000d000000ffffffff08240000720600000e000000720600000e000000ffffffff08240000800600000d000000800600000d000000ffffffff082400008d0600000e0000008d0600000e000000ffffffff082400009b0600000c0000009b0600000c000000ffffffff08240000a70600000d000000a70600000d000000ffffffff08240000b40600000d000000b40600000d000000ffffffff08240000c10600000e000000c10600000e000000ffffffff08240000cf0600000d000000cf0600000d000000ffffffff08240000dc0600000e000000dc0600000e000000ffffffff08240000ea06000039000000ea06000039000000ffffffff08240000230700003f000000230700003f000000ffffffff0824000062070000060000006207000006000000ffffffff0824000068070000170000006807000017000000ffffffff002400007f070000230000007f07000023000000ffffffff00240000a207000019000000a207000019000000ffffffff00240000bb07000019000000bb07000019000000ffffffff00240000d407000019000000d407000019000000ffffffff00240000ed07000019000000ed07000019000000ffffffff0024000006080000190000000608000019000000ffffffff002400001f080000190000001f08000019000000ffffffff0024000038080000190000003808000019000000ffffffff0024000051080000190000005108000019000000ffffffff002400006a080000190000006a08000019000000ffffffff0024000083080000190000008308000019000000ffffffff002400009c080000190000009c08000019000000ffffffff00240000b508000019000000b508000019000000ffffffff00240000ce08000015000000ce08000015000000ffffffff00240000e308000017000000e308000017000000ffffffff00240000fa08000011000000fa08000011000000ffffffff002400000b090000040000000b09000004000000ffffffff082400003e090000060000004c00000004000000ffffffff00180000440900001f000000500000001d000000ffffffff0018000063090000080000006d00000006000000ffffffff001800006b0900002b0000007300000029000000ffffffff0018000096090000080000009c00000006000000ffffffff001800009e09000021000000a20000001f000000ffffffff00180000bf09000008000000c100000006000000ffffffff00180000c709000008000000c700000006000000ffffffff00180000cf09000021000000cd0000001f000000ffffffff00180000f009000008000000ec00000006000000ffffffff00180000f809000021000000f20000001f000000ffffffff00180000190a0000080000001101000006000000ffffffff00180000210a000021000000170100001f000000ffffffff00180000420a0000080000003601000006000000ffffffff001800004a0a0000210000003c0100001f000000ffffffff001800006b0a0000080000005b01000006000000ffffffff00180000730a000021000000610100001f000000ffffffff00180000940a0000080000008001000006000000ffffffff001800009c0a000021000000860100001f000000ffffffff00180000bd0a000009000000a501000007000000ffffffff00180000c60a000021000000ac0100001f000000ffffffff00180000e70a000009000000cb01000007000000ffffffff00180000f00a000009000000d201000007000000ffffffff00180000f90a000021000000d90100001f000000ffffffff001800001a0b000009000000f801000007000000ffffffff00180000230b000021000000ff0100001f000000ffffffff00180000440b0000210000001e0200001f000000ffffffff00180000650b0000210000003d0200001f000000ffffffff00180000860b00001c0000005c0200001a000000ffffffff00180000a20b0000090000007602000007000000ffffffff00180000ab0b0000090000007d02000007000000ffffffff00180000b40b0000560000008402000054000000ffffffff001800000a0c000009000000d802000007000000ffffffff00180000000000005d0c00000803000012039433380000005f5a5374706c496353743131636861725f7472616974734963455361496345454e5374375f5f6378783131313262617369635f737472696e6749545f54305f54315f4545524b53385f53415f2e7374725f5f46554e4354494f4e5f5f2e5f5a3130436f6d7061726541676569692e7374722e315f5f46554e4354494f4e5f5f2e5f5a323259616f4d696c6c696f6e616972657350726f626c656d69692e7374722e325f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333241646469692e7374722e332e7374722e345f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333253756269692e7374722e355f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d756c69692e7374722e365f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333244697669692e7374722e375f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d6f6469692e7374722e385f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332416e6469692e7374722e395f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324f727269692e7374722e31305f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332456f7269692e7374722e31312e7374722e31325f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617441646466662e7374722e31335f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617453756266665f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f61744d756c66665f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617444697666665f5f46554e4354494f4e5f5f2e5f5a3854657374426f6f6c62622e7374722e31342e7374722e31355f5f46554e4354494f4e5f5f2e5f5a313054657374537472696e67524b4e5374375f5f6378783131313262617369635f737472696e67496353743131636861725f7472616974734963455361496345454553365f2e7374722e31365f5a3130436f6d7061726541676569695f5f6778785f706572736f6e616c6974795f76307072696e74665f5a4e33656d7037496e7465676572433145524b69695f5a4e4b33656d7037496e74656765726d6945524b53305f5f5a4e4b33656d7037496e7465676572313072657665616c5f696e7445695f5a4e33656d7037496e7465676572443145765f5a323259616f4d696c6c696f6e616972657350726f626c656d69695f5a313254657374496e74333241646469695f5a4e4b33656d7037496e7465676572706c45524b53305f5f5a313254657374496e74333253756269695f5a313254657374496e7433324d756c69695f5a4e4b33656d7037496e74656765726d6c45524b53305f5f5a313254657374496e74333244697669695f5a4e4b33656d7037496e7465676572647645524b53305f5f5a313254657374496e7433324d6f6469695f5a4e4b33656d7037496e7465676572726d45524b53305f5f5a313254657374496e743332416e6469695f5a4e4b33656d7037496e7465676572616e45524b53305f5f5a313254657374496e7433324f727269695f5a4e4b33656d7037496e74656765726f7245524b53305f5f5a313254657374496e743332456f7269695f5a4e4b33656d7037496e7465676572656f45524b53305f5f5a313254657374466c6f617441646466665f5a313254657374466c6f617453756266665f5a313254657374466c6f61744d756c66665f5a313254657374466c6f617444697666665f5a3854657374426f6f6c62625f5a313054657374537472696e67524b4e5374375f5f6378783131313262617369635f737472696e67496353743131636861725f7472616974734963455361496345454553365f5f5a4e4b5374375f5f6378783131313262617369635f737472696e67496353743131636861725f74726169747349634553614963454535635f73747245765f5a4e5374375f5f6378783131313262617369635f737472696e67496353743131636861725f747261697473496345536149634545443145765f5a4e5374375f5f6378783131313262617369635f737472696e67496353743131636861725f747261697473496345536149634545433145524b53345f5f5a4e5374375f5f6378783131313262617369635f737472696e67496353743131636861725f74726169747349634553614963454536617070656e6445524b53345f52656164566172426f6f6c5772697465566172426f6f6c5265616456617255696e743332577269746556617255696e7433325265616456617255696e743634577269746556617255696e74363452656164566172466c6f61745772697465566172466c6f617452656164566172446f75626c655772697465566172446f75626c6552656164566172537472696e675772697465566172537472696e675f5a4e5374375f5f6378783131313262617369635f737472696e67496353743131636861725f747261697473496345536149634545433145765f5a4e4b5374375f5f6378783131313262617369635f737472696e67496353743131636861725f747261697473496345536149634545366c656e67746845766d616c6c6f63506c61744f4e5f656e7472795f436f6d70617265416765506c61744f4e5f656e7472795f59616f4d696c6c696f6e616972657350726f626c656d506c61744f4e5f656e7472795f54657374496e743332416464506c61744f4e5f656e7472795f54657374496e743332537562506c61744f4e5f656e7472795f54657374496e7433324d756c506c61744f4e5f656e7472795f54657374496e743332446976506c61744f4e5f656e7472795f54657374496e7433324d6f64506c61744f4e5f656e7472795f54657374496e743332416e64506c61744f4e5f656e7472795f54657374496e7433324f7272506c61744f4e5f656e7472795f54657374496e743332456f72506c61744f4e5f656e7472795f54657374466c6f6174416464506c61744f4e5f656e7472795f54657374466c6f6174537562506c61744f4e5f656e7472795f54657374466c6f61744d756c506c61744f4e5f656e7472795f54657374466c6f6174446976506c61744f4e5f656e7472795f54657374426f6f6c506c61744f4e5f656e7472795f54657374537472696e67506c61744f4e5f656e7472795f6672656566726565362e302e31206769742d643637373763637838365f36342d756e6b6e6f776e2d6c696e75782d676e756d6f64756c652e4c2e7374722e4c5f5f46554e4354494f4e5f5f2e5f5a3130436f6d7061726541676569692e4c2e7374722e312e4c5f5f46554e4354494f4e5f5f2e5f5a323259616f4d696c6c696f6e616972657350726f626c656d69692e4c2e7374722e322e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333241646469692e4c2e7374722e332e4c2e7374722e342e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333253756269692e4c2e7374722e352e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d756c69692e4c2e7374722e362e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333244697669692e4c2e7374722e372e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d6f6469692e4c2e7374722e382e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332416e6469692e4c2e7374722e392e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324f727269692e4c2e7374722e31302e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332456f7269692e4c2e7374722e31312e4c2e7374722e31322e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617441646466662e4c2e7374722e31332e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617453756266662e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f61744d756c66662e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617444697666662e4c5f5f46554e4354494f4e5f5f2e5f5a3854657374426f6f6c62622e4c2e7374722e31342e4c2e7374722e31352e4c5f5f46554e4354494f4e5f5f2e5f5a313054657374537472696e67524b4e5374375f5f6378783131313262617369635f737472696e67496353743131636861725f7472616974734963455361496345454553365f2e4c2e7374722e31360000000000"

/// Starter -> INVITOR_VALUE_TEMPLATE
#define INVITOR_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219"

/// Participator, use symbol '&' to split, eg:a&b&c -> PARTIES_VALUE_TEMPLATE
#define PARTIES_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219&0x3771c08952f96e70af27324de11bb380ec388ec3"

/// Urls for participators, use symbol '&' to split.
/// URLS -> URLS_VALUE_TEMPLATE
#define URLS_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219$DirectNodeServer:default -h 10.10.8.20 -p 10001,0x3771c08952f96e70af27324de11bb380ec388ec3$DirectNodeServer:default -h 10.10.8.20 -p 10002"

/// Rule of allocation.
/// format:k1:v1,k2:v2,k3:v3 -> PROFIT_RULES_VALUE
#define PROFIT_RULES_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219:1,0x3771c08952f96e70af27324de11bb380ec388ec3:2"

/// Calu method's price -> METHOD_PRICE_VALUE
/// rule:${METHOD}&${VALUE},${METHOD}&${VALUE}
/// eg:
/// func01$10000000000000000,func02$200000000000000,func03$4000000000000000000000000000
#define METHOD_PRICE_VALUE "foo_abs$200"

/// the prefix key of map struct
#define PREFIX_RULES_MAP PREFIX "_MAP_RULE_"
#define PREFIX_RESULT_MAP PREFIX "_MAP_RESULT_"
#define PREFIX_ALLOT_MAP PREFIX "_MAP_ALLOT_"
#define PREFIX_METHOD_MAP PREFIX "_MAP_PRICE_"

class MPC : public platon::Contract {
public:
  // define event.
  PLATON_EVENT(start_calc_event, uint64_t, const char *)
  PLATON_EVENT(set_result_event, uint64_t, const char *)
  PLATON_EVENT(set_fees_event, uint64_t, const char *)

  void init() {
    platon::setState(OWNER, platon::caller().toString()); // save msg.sender
    platon::setState(KEY_INVITORS, INVITOR_VALUE);        // save invitor
    platon::setState(KEY_PARTIES, PARTIES_VALUE);         // save partner
    platon::setState(KEY_URLS, URLS_VALUE);               // save all urls
    platon::setState(KEY_IR, IR_VALUE);                   // save ir data
    init_set_urls();                                      // save each one by id
    init_set_price(); // save price of method
  }

  /// get the owner address of contract.
  const char *get_owner() const {
    std::string _owner_;
    platon::getState(OWNER, _owner_);
    return _owner_.c_str();
  }

  void CompareAge(const char *extra) {start_calc("CompareAge", extra);}
  void YaoMillionairesProblem(const char *extra) {start_calc("YaoMillionairesProblem", extra);}
  void TestInt32Add(const char *extra) {start_calc("TestInt32Add", extra);}
  void TestInt32Sub(const char *extra) {start_calc("TestInt32Sub", extra);}
  void TestInt32Mul(const char *extra) {start_calc("TestInt32Mul", extra);}
  void TestInt32Div(const char *extra) {start_calc("TestInt32Div", extra);}
  void TestInt32Mod(const char *extra) {start_calc("TestInt32Mod", extra);}
  void TestInt32And(const char *extra) {start_calc("TestInt32And", extra);}
  void TestInt32Orr(const char *extra) {start_calc("TestInt32Orr", extra);}
  void TestInt32Eor(const char *extra) {start_calc("TestInt32Eor", extra);}
  void TestFloatAdd(const char *extra) {start_calc("TestFloatAdd", extra);}
  void TestFloatSub(const char *extra) {start_calc("TestFloatSub", extra);}
  void TestFloatMul(const char *extra) {start_calc("TestFloatMul", extra);}
  void TestFloatDiv(const char *extra) {start_calc("TestFloatDiv", extra);}
  void TestBool(const char *extra) {start_calc("TestBool", extra);}
  void TestString(const char *extra) {start_calc("TestString", extra);}

  /// trigger mpc compute.
  void start_calc(const char *method, const char *extra) {

    // check msg.send is valid
    bool _isPartner = is_partner();
    if (!_isPartner) {
      platon::println("Invalid msg.sender, not belong to partners.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Invalid msg.sender, not belong to partners.");
      return;
    }

    // check value is greater than preprice.
    bool is_enough_res = is_enough_price(method);
    if (!is_enough_res) {
      platon::println("insufficient value to the method of ", method);
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Insufficient value for the method.");
      return;
    }

    // gen task id and save value
    std::string task_id_str = gen_task_id();
    const char *task_id = task_id_str.c_str();
    platon::println("New task id: ", task_id);
    bool save_res = save_allot_amount(task_id);
    if (!save_res) {
      platon::println("save allot amount fail");
      PLATON_EMIT_EVENT(start_calc_event, 0, "save allot amount fail");
      return;
    }

    // save task information. INFO_PREFIX + TASK_ID
    std::string task_key_str = KEY_TASK_INFO + task_id_str;
    std::string info_str =
        std::string(method) + COMMON_SPLIT_CHAR + std::string(extra);
    platon::println("save info for task:", "key:=", task_key_str, "info:=", info_str);
    platon::setState(task_key_str, info_str);
    platon::println("start success..");
    platon::println("Finalize task id: ", task_id);
    PLATON_EMIT_EVENT(start_calc_event, 1, task_id);
  }

  /// The result recored, and allot profit to participators.
  void set_result(const char *taskId, uint64_t status, const char *data) {
    // check msg.send is valid
    bool _isPartner = is_partner();
    if (!_isPartner) {
      platon::println(
          "set_result->Invalid msg.sender, not belong to partners.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Invalid msg.sender, not belong to partners.");
      return;
    }

    std::string key_str = PREFIX_RESULT_MAP + std::string(taskId);
    // check result set
    std::string res_value_str;
    platon::getState(key_str, res_value_str);
    if (res_value_str.length() > 1) {
      platon::println("set_result-> set already. Can not reset again.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "set already. Can not reset again.");
      return;
    }

    // save result
    std::string status_str = toString(status);
    std::string data_str = std::string(data);
    std::string value_str = status_str + COMMON_SPLIT_CHAR + data_str;
    platon::println("save result, key: ", key_str, " value:", value_str);
    platon::setState(key_str, value_str);

    // divide the money. equal division.
    if (status != 1) { // 1 success 0 fail.
      platon::println("set_result-> status must equal 1.");
      PLATON_EMIT_EVENT(start_calc_event, 0, "status must equal 1.");
      return;
    }
    platon::u256 amount_i = get_saved_amount(taskId);
    const char *partners_c = get_participants();
    std::string partner_str = std::string(partners_c);
    std::vector<std::string> partner_vec =
        split(partner_str, COMMON_SPLIT_CHAR);

    platon::u256 count_i(partner_vec.size());

    platon::println("part per:", count_i.convert_to<std::string>());
    platon::u256 each_one_i = amount_i / count_i;
    platon::println("avg :", each_one_i.convert_to<std::string>());

    // transfer to partner
    for (unsigned int i = 0; i < partner_vec.size(); ++i) {
      std::string p_str = partner_vec[i];
      platon::println("transfer to:", p_str,
                      " value:", each_one_i.convert_to<std::string>());
      platon::Address _addr(p_str, true);
      platon::callTransfer(_addr, each_one_i);
    }
    platon::println("Set result success.");
    PLATON_EMIT_EVENT(set_result_event, 1, "Setting result success.");
  }

  /// k1:v1,k2:v2,k3:v3
  void set_fees(const char *fees) {
    platon::println("into set_fees...");
    PLATON_EMIT_EVENT(set_fees_event, 1, "set fees done.");
  }

  const char *get_ir_data() const {
    std::string irdata;
    platon::getState(KEY_IR, irdata);
    return irdata.c_str();
  }

  const char *get_participants() const {
    std::string parties;
    platon::getState(KEY_PARTIES, parties);
    platon::println("get_participants:", parties);
    return parties.c_str();
  }

  const char *get_urls() const {
    std::string urls;
    platon::getState(KEY_URLS, urls);
    return urls.c_str();
  }

  const char *get_url_by_id(const char *id) const {
    std::string url;
    std::string key_str = KEY_URLS + std::string(id);
    platon::getState(key_str, url);
    return url.c_str();
  }

  const char *get_result(const char *task_id) const {
    std::string id_str = std::string(task_id);
    std::string key_str = PREFIX_RESULT_MAP + std::string(id_str);
    std::string result;
    platon::getState(key_str, result);
    // std::string value_str = status_str + COMMON_SPLIT_CHAR + data_str;
    std::vector<std::string> partner_vec = split(result, COMMON_SPLIT_CHAR);
    if (partner_vec.size() != 2) {
      return "";
    }
    return partner_vec[1].c_str();
  }

  uint64_t get_status(const char *task_id) const {
    std::string id_str = std::string(task_id);
    std::string key_str = PREFIX_RESULT_MAP + std::string(id_str);
    std::string result;
    platon::getState(key_str, result);
    std::vector<std::string> partner_vec = split(result, COMMON_SPLIT_CHAR);
    if (partner_vec.size() != 2) {
      return 0;
    }
    uint64_t st = stouint64(partner_vec[0]);
    return st;
  }

  const char *get_fee(const char *method) const {
    platon::u256 fee;
    std::string key_str = KEY_METHOD_PRICE + std::string(method);
    platon::getState(key_str, fee);
    platon::println("call get_fee. - ", fee.convert_to<std::string>());
    return fee.convert_to<std::string>().c_str();
  }

  const char *get_invitor() const {
    std::string invitor;
    platon::getState(KEY_INVITORS, invitor);
    return invitor.c_str();
  }

private:
  std::string gen_task_id() const {
    uint64_t nonce_i = getCallerNonce();
    std::string nonce_str = toString(nonce_i);
    platon::h160 caller_h = platon::caller();
    std::string caller_h_str = caller_h.toString();
    platon::println("get nonce: ", nonce_str);
    platon::println("get caller_h_str: ", caller_h_str);
    std::string src_str = nonce_str + caller_h_str;
    char *t_src;
    strcpy(t_src, src_str.c_str());

    platon::h256 sha3_h = platon::sha3((platon::byte *)t_src, strlen(t_src));
    std::string sha3_h_str = sha3_h.toString();
    platon::println("task id : ", sha3_h_str);
    return sha3_h_str;
  }

  bool is_partner() {
    platon::h160 caller_h = platon::caller();
    std::string caller_h_str = caller_h.toString();
    std::string partner_str;
    platon::getState(KEY_PARTIES, partner_str);
    platon::println("Participator :", partner_str);
    platon::println("Caller :", caller_h_str);
    std::string::size_type idx = caller_h_str.find("0x");
    if (idx == std::string::npos) {
      caller_h_str = "0x" + caller_h_str;
    }
    platon::println("Caller End:", caller_h_str);
    std::vector<std::string> partner_vec =
        split(partner_str, COMMON_SPLIT_CHAR);
    for (unsigned int i = 0; i < partner_vec.size(); ++i) {
      platon::println("v_caller:", partner_vec[i]);
      if (strcmp(caller_h_str.c_str(), partner_vec[i].c_str()) == 0) {
        return true;
      }
    }
    return false;
  }

  /// blance is engouth for caller to pay the method's price.
  bool is_enough_price(const char *method) {
    // the price of method.
    platon::u256 fee;
    std::string key_str = KEY_METHOD_PRICE + std::string(method);
    platon::println("is_enough_price : key_str", key_str);
    platon::getState(key_str, fee);
    platon::println("is_enough_price:call get_fee. - ",
                    fee.convert_to<std::string>());
    // the pricee of value to caller.
    platon::u256 _value = platon::callValue();
    platon::println("is_enough_price:call get_value. - ",
                    _value.convert_to<std::string>());
    if (_value >= fee) {
      platon::println("is_enough_price: return true.");
      return true;
    }
    platon::println("is_enough_price: return false.");
    return false;
  }

  /// transfer of value, from user's account to contract's account.
  bool save_allot_amount(const char *task_id) {
    // platon::balance().convert_to<std::string>().c_str();
    platon::u256 value_u = platon::callValue();
    std::string key_str = PREFIX_ALLOT_MAP + std::string(task_id);

    std::string value_str = value_u.convert_to<std::string>();
    platon::println("save_allot_amount: ", key_str, " - ", value_str);
    platon::setState(key_str, value_u);
    return true;
  }

  platon::u256 get_saved_amount(const char *task_id) {
    std::string key_str = PREFIX_ALLOT_MAP + std::string(task_id);
    platon::u256 value_u;
    platon::getState(key_str, value_u);
    platon::println("get_saved_amout: ", value_u.convert_to<std::string>());
    return value_u;
  }

  void init_set_urls() {
    // URLS_VALUE -> "id01$tcpSession:tcp -p 9527,id02$tcpSession:tcp -p
    // 9527,id03$tcpSession:tcp -p 9527"
    char *values = URLS_VALUE;
    char *pattern = ",";
    // ["id01$tcpSession:tcp -p 9527", "id02$tcpSession:tcp -p 9527",
    // "id03$tcpSession:tcp -p 9527"] KEY_URLS + "id01" -> tcpSession:tcp -p
    // 9527
    platon::println("---- begin split ------");
    std::vector<std::string> arr = split(values, pattern);
    for (unsigned int i = 0; i < arr.size(); ++i) {
      char *trim_res = new char[100];
      char *str_in = new char[100];
      strcpy(str_in, arr[i].c_str());

      str_trim(str_in, trim_res);

      std::vector<std::string> id_valule_arr = split(str_in, "$");
      if (id_valule_arr.size() != 2) {
        platon::println("Invalid value str of urls.");
        platon::platonThrow("Invalid value str of urls.");
      }
      // do set state
      std::string _key = KEY_URLS + id_valule_arr[0];
      std::string _value = id_valule_arr[1];
      platon::println("init urls, key : ", _key, " , values: ", _value);
      platon::setState(_key, _value);
      delete[] str_in;
      delete[] trim_res;
    }
  }

  void init_set_price() {
    // METHOD_PRICE_VALUE ->
    // "func01$10000000000000000,func02$200000000000000,func03$4000000000000000000000000000"
    char *values = METHOD_PRICE_VALUE;
    char *pattern = ",";
    // ["func01$10000000000000000", "func01$10000000000000000",
    // "func01$10000000000000000"] PREFIX_METHOD_MAP + "func01" ->
    // 10000000000000000
    platon::println("---- Begin split price ------");

    std::vector<std::string> arr = split(values, pattern);
    platon::println("---- End split price ------", arr.size());
    for (unsigned int i = 0; i < arr.size(); ++i) {
      char *trim_res = new char[100];
      char *str_in = new char[100];
      strcpy(str_in, arr[i].c_str());
      str_trim(str_in, trim_res);

      std::vector<std::string> id_valule_arr = split(str_in, "$");
      if (id_valule_arr.size() != 2) {
        platon::println("Invalid value str of price.");
        platon::platonThrow("Invalid value str of price.");
      }
      // do set state
      std::string key_str = KEY_METHOD_PRICE + id_valule_arr[0];
      std::string value_str = id_valule_arr[1];
      platon::println("init price, key : ", key_str, " , values: ", value_str);
      platon::u256 value_u(value_str);
      platon::setState(key_str, value_u);
      delete[] str_in;
      delete[] trim_res;
    }
  }

private:
  uint64_t stouint64(const std::string &num) const {
    uint64_t res = 0;
    for (size_t i = 0; i < num.length(); i++) {
      res = res * 10 + (num[i] - '0');
    }
    platon::println("stouint64 ", num, "->", res);
    return res;
  }

  std::string toString(uint64_t num) const {
    std::string res;
    while (num != 0) {
      char c = num % 10 + '0';
      num /= 10;
      res.insert(0, 1, c);
    }
    platon::println("toString ", num, "->", res);
    return res;
  }

  std::vector<std::string> split(const std::string &str,
                                 const std::string &pattern) const {
    // const char* convert to char*
    char *strc = new char[std::strlen(str.c_str()) + 1];
    strcpy(strc, str.c_str());
    std::vector<std::string> result_vec;
    char *tmp_str = strtok(strc, pattern.c_str());
    while (tmp_str != NULL) {
      result_vec.push_back(std::string(tmp_str));
      tmp_str = strtok(NULL, pattern.c_str());
    }
    delete[] strc;
    return result_vec;
  }

  void str_trim(char *str_in, char *str_out) {
    int i, j;
    i = 0;
    j = strlen(str_in) - 1;
    while (str_in[i] == ' ') {
      i++;
    }
    while (str_in[j] == ' ') {
      --j;
    }
    strncpy(str_out, str_in + i, j - i + 1);
    str_out[j - i + 1] = '\0'; // end flag
  }
};
} // namespace mpc

PLATON_ABI(mpc::MPC, CompareAge);
PLATON_ABI(mpc::MPC, YaoMillionairesProblem);
PLATON_ABI(mpc::MPC, TestInt32Add);
PLATON_ABI(mpc::MPC, TestInt32Sub);
PLATON_ABI(mpc::MPC, TestInt32Mul);
PLATON_ABI(mpc::MPC, TestInt32Div);
PLATON_ABI(mpc::MPC, TestInt32Mod);
PLATON_ABI(mpc::MPC, TestInt32And);
PLATON_ABI(mpc::MPC, TestInt32Orr);
PLATON_ABI(mpc::MPC, TestInt32Eor);
PLATON_ABI(mpc::MPC, TestFloatAdd);
PLATON_ABI(mpc::MPC, TestFloatSub);
PLATON_ABI(mpc::MPC, TestFloatMul);
PLATON_ABI(mpc::MPC, TestFloatDiv);
PLATON_ABI(mpc::MPC, TestBool);
PLATON_ABI(mpc::MPC, TestString);
PLATON_ABI(mpc::MPC, start_calc);
PLATON_ABI(mpc::MPC, get_owner);
PLATON_ABI(mpc::MPC, set_result);
PLATON_ABI(mpc::MPC, get_ir_data);
PLATON_ABI(mpc::MPC, get_participants);
PLATON_ABI(mpc::MPC, get_urls);
PLATON_ABI(mpc::MPC, get_result);
PLATON_ABI(mpc::MPC, get_status);
PLATON_ABI(mpc::MPC, get_fee);
PLATON_ABI(mpc::MPC, get_invitor);
PLATON_ABI(mpc::MPC, get_url_by_id);

#endif