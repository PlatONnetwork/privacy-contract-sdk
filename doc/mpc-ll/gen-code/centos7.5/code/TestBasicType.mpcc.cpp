#ifndef PLATON_MPCC_CPP
#define PLATON_MPCC_CPP

#include <platon/platon.hpp>
#include <stdio.h>
#include <stdlib.h>
#include <string>

namespace mpc {

#define COMMON_SPLIT_CHAR "&"
#define OWNER "__OWNER__"

#define PREFIX "__MPC__"
#define PREFIX_BONUS_RULE "__BONUS_RULE__"

#define KEY_IR "__IR__"
#define KEY_PARTIES PREFIX "__PARTIES__"
#define KEY_URLS PREFIX "__URLS__"
#define KEY_INVITORS PREFIX "__INVITOR__"
#define KEY_TASK_INFO PREFIX "__TASK__"
#define KEY_METHOD_PRICE PREFIX "__METHOD_PRICE__"

/// IR data -> IR_VALUE_TEMPLATE
#define IR_VALUE "4243c0de3514000005000000620c30244959bea6eed37e2d4401320500000000210c0000b10c00000b02210002000000130000000781239141c80449061032399201840c250508191e048b62801c450242920b42e41032143808184b0a32728848901420434688a50019324204490e909123c4504151818ce183e58a0439460651180000c80100001bd426f8ffffffff0170803200c280188777900779288771a00776c88736908777a80777208772208736208774b08774208772688379880779a0873630077868837608077a4007c01cc2811de6a11c00821cd2611ec2411cd8a11cda801ec2211dd8a10dc6211cd8811de60130877060877928078060877298877968037890877218877498877268037380877608077200cc211cd8611eca0120dce11ddac01ce4211cdaa11cda001ede211ddc811eca411edaa01cd8211dda01a00779a88772000677788736300779088776288736808777480777a0877290873628077648877668037778077768037628877030078070877768837470077398873630077868837608077a4007c01cc2811de6a11c00c21ddea10dd4a11eda011eda801ec2411cd8a11ce60130877060877928078070877768037708077798873630077868837608077a4007c01cc2811de6a11c00c21ddea10de6211dcec11dca811cda401fca411ede611edac01ce0a10dda211ce8011d0073080776988772000877788736a0077908077880877470877368837608077a4007c01cc2811de6a11c00621ee8211cc6611dda001ee4e11de8a11cc6811ede411eda401ceac11ccca11ce4a10de6211df4a11c003c00087a080779388772a08736180778a807001ff0c00edac00ee80020e8211ce4e11cca811edac01cca211ce8a11ee4a11ce601580373c0877990073658837668077c60833598877928073658837998877290033658037cc0833b00887a70877908077328873630077868837608077a4007c01cc2811de6a11c00a21ee6a11cda601edec11ce8a10dcc811dde211ce80130877060877928076003210080186c7099e1ffffffff07621cde411ee4a11cc6811ed8211fda401edea11edc811cca811cda801cd2c11ed2811ccaa10de6211ee4811edac01ce0a10dda211ce8011d007308077698877200087248877908077160877268037a0887746087361887706007769807c01cc2811de6a11c00821dca611ee6a10de0411eca611cd2611ecaa10dcc011eda211cc80130877060877928078070877768037390877068877268037878877470077a2807796883726087746807801ee4a11eca0118dce11ddac01ce4211cdaa11cda001ede211ddc811eca411edaa01cd8211ddaa10ddce11ddca10dd8a11cc2c11c00c21ddea10dd2c11dcc611edac01ce0a10dda211ce8011d0073080776988772000877788736708770708779680373808736688770a0077400cc211cd8611eca0120dce11dda601ed2e11cdca11cc8a10df4a11ce4e11de6a10dcc011edaa01dc2811ed00130877060877928078070877768037a908770800778480777388736688770a0077400cc211cd8611eca0120e6811ec2611cd6a10de0411ede811eca611ce8e11de4a10dc4a11eccc11cca411eda601ed2411fca01c00380a0877090877328077a68837180877a00f0010feca00dec800e00821ec2411ecea11ce8a10dcca11cc2811eea411eca611e803530077c980779608335688776c00736588379988772608335988779280739608335c0073cb80380a80777988770308772680373808736688770a0077400cc211cd8611eca0120ea611ecaa10de6e11dcc811edac01cd8e11dc2811e00730807769887720036148410a401b1812802a0db5018439006d0069839feffffff7f0024621cde411ee4a11cc6811ed8211fda401edea11edc811cca811cda801cd2c11ed2811ccaa10de6211ee4811edac01ce0a10dda211ce8011d007308077698877200087248877908077160877268037a0887746087361887706007769807c01cc2811de6a11c00821dca611ee6a10de0411eca611cd2611ecaa10dcc011eda211cc80130877060877928078070877768037390877068877268037878877470077a2807796883726087746807801ee4a11eca0118dce11ddac01ce4211cdaa11cda001ede211ddc811eca411edaa01cd8211ddaa10ddce11ddca10dd8a11cc2c11c00c21ddea10dd2c11dcc611edac01ce0a10dda211ce8011d0073080776988772000877788736708770708779680373808736688770a0077400cc211cd8611eca0120dce11dda601ed2e11cdca11cc8a10df4a11ce4e11de6a10dcc011edaa01dc2811ed00130877060877928078070877768037a908770800778480777388736688770a0077400cc211cd8611eca0120e6811ec2611cd6a10de0411ede811eca611ce8e11de4a10dc4a11eccc11cca411eda601ed2411fca01c00380a0877090877328077a68837180877a00f0010feca00dec800e00821ec2411ecea11ce8a10dcca11cc2811eea411eca611e803530077c980779608335688776c00736588379988772608335988779280739608335c0073cb80380a80777988770308772680373808736688770a0077400cc211cd8611eca0120ea611ecaa10de6e11dcc811edac01cd8e11dc2811e0073080776988772003610480088c10622110031d86028019000dd8662118234403614cc10a401b2a16880200d900d84f3ffffffff032001491800000e00000013844098100c13848198300c853121382604c104221090640211280b3341189609c3d02c130262825018130267c2502ccc84609920340b00892000007f0000003222c809206485049323a484049323e384a19014124c8e8c0b84e44c1098c31c019216000ae4028006b901a0425e00e8901c004a64038016e901a0460a00e89109008a640780267304c11c011894a162b1d0a50616ca10a00a960d714600e60840611841f86672c6811dc2611ee6c10dcaa11de0410ff44014d2811e5000a2d04cd238b04338ccc33cb84139b4033ce8811ea4823bd043399c4339c803122c221a91a5101e52c942a64278482412a1caf021594855040f895865b0582ce49a0128030c06a358192a950acd66da8579a00779a88771a0073798077a20073dd00371088779488771f88579a0077948077738073e18077408077960033098077a20073dd0837140877090875fa00779088774a08779e0837140877090073f60033098077a20073dd0837060077678877108077a780779e0837140877090073f00033fd0033df88550600776788771f8057448077228077940c166a66b1cd8211ce6611edc601ee8811cf4400fc4211ce6211dc6e117e6811ee4211ddce11c5050235b213cb7db8d7045d8dc485704cf8d7865f0dc6ee42bc3ed762360212c1bcb868485b06c2c152216c2b2b194c85808cbc66221247d0a61d95894b42c846563f950936085b06c2c4f8216c2b2b1c0483a0440d4425836962a590b61d958a8842dc2e6435ada14c2c2e596a85b04cf86be541908980230c2c6423700006306800e8209183ee0811dfc821dd0411bd4833bac833bbcc33db8431bb0433ab8433de0431b9c833bd4c3863228873668073d28873648073ba0033db0033a680373c00338d0833890033c680377c0033d88033bd0833990033db0033a688359880339c003a5078408492143468a84001a210c6b30ce402dc40e880e886010872400002000000000764078d00dc3382401000001000000b003aa05a318ca2109000008000000801dd02ea4c131984312000010000000003b20923092e11c9200008000000000d801a9c4b70cea9004000004000000c00e282d8c66b087240000200000000076406f613c433e2401000001000000b003aa8b6f19d62109000008000000801d106d18cfa00f4900004000000000ec8074e35b067648020000020000006007941fc633ec4312000010000000003ba0fff896a11d9200008000000000d801f988f10cfc9004000004000000c00e884cbe65708724000020000000007640a3623c433f2401000001000000b0034a956f19de2109000008000000801d10ba18cfe00f4900004000000000ec80dce55b067848020000020000006007d432c733fc4312000010000000003b209af996211e9200008000000000d801cdcdf10c209104000004000000c00e486f8e64408724000020000000007640a1f32d833c2401000001000000b003029fa319ee2109000008000000801dd0f97ccb300f4900004000000000ec804ce85b067a480200000200000060075446df32d44312000010000000003b2052d2a221249200008000000000d801f9d2d10cf89004000004000000c00ea89c8e64488724000020000000007640ec2406c3400e4900004000000000ec805cea980691480200000200000060885453d0050040000000000000008c0430442a2b2a030200000000000000000060889457060704800000000000000000c010e9af2c3300026000000008000000006088545b181a000140000000000000000030446a2f4f0d80001000000000000000001822add8c40640001400000001000000000c917c8cbb00000800000000000080910086487a26b9010000060000000000003012c01089d5303400028000000000000000006088446e921b0000600000000000000023010c91ec4d720300000c0000000000006024802112ca61680004000100000000000000c01009ec24370000c00000000000000046021822c91d860640001000000000000000000c91544f720300000c0000000000006024802112ef61680004000100000000000000c01089fe24370000c00000000000000046021822996080a101100004000000000000000043241f0c24370000c00000000000000046021822c16180a10110000400000000000000004324540c24370000c00000000000000046021822e96280a10110000400000000000000004324790ca4380000c000000000000000006088449281140700001800000000000000000c916c3290e200000003000000000000008021125a06521c00006000000000000000003044d2cba0990300000e00000000000000008648a7195478000000020000000000008c043044e2cdc0d10320000a00000000000000008648001de001004c080000000000013012c010493d83840f80002800000002000000001822cd67c0f801100009000040000000000043a4ff0c22500002400100000000000000608804a3c1220a40000000000000000000000c917634604801080000000000000000008021d299068d2900010000000000000000003044a2d3c0410520000000000000000000008648a21a34ab0004000000000000000000c010e95503a71580000000000000000000001822f56ac0c002100000000000000000000043a4740d1a590002000000000000000000608864af41630b40000000000000000000000c91463670700108000000000000000000802152cc06862e00010000000000000000003044bad9e0ea05000000000000000000000086486e1b8c412f000000000000000000000030448add20eb0500000000000000000000008648ea1b64bd0000000000000000000000c010698483ac1700000000000000000000001822f17090f502000000000000000000000043a43a0eb25e00000000000000000000006088e4ca41d60b00000000000000000000000c91ce39c87a01000000000000000000008021124807592f00000000000000000000003044cae920eb0500000000000000000000008648721d64bd0000000000000000000000c01069b583ac1700000000000000000000001822917790f502000000000000000000000043a4fe0eaa5e0000000000000000000000608824e341f40b00000000000000000000000c91c63c207e010800000000000000000000890d028533190000b24000000070000000321e982019114c908c092647c60443b29440215040abd21c1464a7c7651da8440609df621da84456d06015ce611e2022348358a525a4899d22a431a8a05a690e9297e775361dd50bb2d3e3724bf816a774a012594187b564c0319165419c064022424a232758088612ba95e6a0b41b5ea78382ecf4b8ac0395c820e15bac0395c80add4a7350da0dafd34141767a5cd6814a6690f02dd6814a66856ea53928ed86d7e9a0203b3d2eeb40a53948f816eb40a5b98216cbb4843489cd74dbda302cd312d22436d36db354b04c4b4893d84cb76d52cb322d214d6233dd768754cbb4843489cd74dba6332cd312d22436d36d6bcdb04c4b4893d84cb78d46d1322d214d6233ddb6e744cbb484347d8b034cda302cd312d2f42d0e30b154b04c4b48d3b738c06452cb322d214ddfe200538754d4d0ae3407c9cbf33a9b8eea05d9e97119549a83846f714a072a9115da95e62079795e67d351bd203b3d2e834a7390f02d4ee94025b342bbd21c242fcfeb6c3aaa1764a7c76590c90412bec5291da84456d0438395062d0d541abc34286960d280af8197228bb484346d8eb3d044b9d21c242fcfeb6c3aaa1764a7c765d00a247c8b533a5069aea08dad4684c2230000b1180000740000003308801cc4e11c6614013d88433884c38c4280077978077398710ce6000fed100ef4800e330c421ec2c11dcea11c6630053d88433884831bcc033dc8433d8c033dcc788c7470077b08077948877070077a700376788770208719cc110eec900ee1300f6e300fe3f00ef0500e3310c41dde211cd8211dc2611e6630893bbc833bd04339b4033cbc833c84033bccf0147660077b680737688772680737808770908770600776280776f8057678877780875f08877118877298877998812ceef00eeee00ef5c00eec300362c8a11ce4a11ccca11ce4a11cdc611cca211cc4811dca6106d6904339c84339984339c84339b8c33894433888033b94c32fbc833cfc823bd4033bb0c30cc7698770588772708374680778608774188774a08719ce530fee000ff2500ee4900ee3400fe1200eec500e3320281ddcc11ec2411ed2211cdc811edce01ce4e11dea011e66185138b0433a9c833bcc50247660077b68073760877778077898514cf4900ff0500e331e6a1eca611ce8211ddec11d7e011ee4a11ccc211df0610654858338ccc33bb0433dd04339fcc23ce4433b88c33bb0c38cc50a877998877718877408077a28077298815ce3100eecc00ee5500ef33023c1d2411ee4e117d8e11dde011e00000000792000003c000000621e482043880c19391924909140c6c8c86822500814329e18192147c89051148898000023a10000636c616e672076657273696f6e20362e302e312028746167732f52454c454153455f3630312f66696e616c292028676974403139322e3136382e392e36363a506c61744f4e2f706c61746f6e2d636f6d70696c65722e67697420643637373763633130363134353731316137656439613335343538386566666262623135363034652977636861725f73697a650000002308d62f8c2058e0304310cc300c02212381094a858dcdaecd258daccc8d6e9480c8888dcdaecda5ed8dac8eadccc58c2dec6c6e94a00000a91800000b0000000b0a7228877780077a587098433db8c338b04339d0c382e61cc6a10de8411ec2c11de6211de8211ddec11d00d11000000600000007cc3ca4833b9c033b94033da0833c94433890c301000000612000005f00000013044b2c100000000a0000006419012802da0c750c446099846512431d810058266199c4504761089649582641e4190000000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10083400c306c4f10c0021964188658c182000088201370f8d23042306c70282606006f3902c78304db28020121466300f88024d9330208808061ac8039120d320000822c3a106f14044175860c4a06840100cd8401e8c6103e20806800ecb9826014010210cee1e2029a0c432861b02eb0c460c8a0604c1800decc11931281a10040336b08727837983811c0260342100860d88272080d104211836209e60006609927983811c0260342100860d08292080d10421183620a460006609907983811c0260342100860d882a2080d10421183620aa6000460c8a0604c1800dfe619a2540460c8a0604c1800dfee19a2548460c8a0604c1800dfe019b2550c8da10b22c63b6a11380d9864008e60c820000612000005f00000013044b2c100000000a0000006419012802da0c751cc86099846512431d810058266199c4504761089649582641e4190000000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10083400c306c4f10c0021964188658c182000088201370f8d23042306c70282606006f3902c78304db28020121466300f88024d9330208808061ac8039120d320000822c3a106f14044175860c4a06840100cd8401e8c6103e20806800ecb9826014010210cee1e2029a0c432861b02eb0c460c8a0604c1800decc11931281a10040336b08727837983811c0260342100860d88272080d104211836209e60006609927983811c0260342100860d08292080d10421183620a460006609907983811c0260342100860d882a2080d10421183620aa6000460c8a0604c1800dfe619a2540460c8a0604c1800dfee19a2548460c8a0604c1800dfe019b2550c8da10b22c63b6a11380d9864008e60c820000612000006000000013044b2c100000000c0000006419012802da0c752c4c6199846512431d894258266199c45047e3189649582631d4f140876512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061ab8039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c6299846512431d894258266199c45047e3189649582631d4f140896512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061acc039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c8c6299846512431d894258266199c45047e3189649582631d4f1408b6512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061aac039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c6399846512431d894258266199c45047e3189649582631d4f1408d6512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061aa4039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c8c6399846512431d894258266199c45047e3189649582631d4f1408f6512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061a9c039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c6499846512431d894258266199c45047e3189649582631d4f140916512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061a94039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c8c6499846512431d894258266199c45047e3189649582631d4f140936512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061a8c039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b62110823983200000612000006000000013044b2c100000000c0000006419012802da0c752c0c6599846512431d894258266199c45047e3189649582631d4f140956512964910790600000000331196f50ba330136159bf300a33116360fd0229cc448c81f50ba43013b159bf000a331196f50ba030136159bf300a33116360fd02290c1b10483400c306c4010d0021964188658c182000088201470fce23042306c70282606006f4902c79304db28020121466400f88124d9330208808061a84039120d320000822c3a106f24048175860c4a06840100cd8601e8c6103e20806800ecb9846014010210c0e1fa2090a28b18c1183a201413060037b68460c8a0604c1800decc1c960de60208700184d08806103c2090860344108860d08271880598264de60208700184d08806103220a0860344108860d88281880590264de60208700184d08806103820a0860344108860d082a18801183a201413060837f906609901183a201413060837fb06609921183a201413060837fb8660914aa36842acb986de00460b6211082398320000061200000250000001304412c100000000b000000641901a0cd50c7c25c9649582631d4912896651296490c75340e6699846512431d0f7458266199040000000033117060fdc228cc44c081f50ba330130107d62f8cc2b001312803306c4008c900d0001b17509108d8b8808a230608008260c0bd83b20c0121b041086c9410c0b00191040340096c5c40c5110304004130e0eae1899c8018d8c8000061200000250000001304412c100000000b000000641901a0cd50c7c2649649582631d4912896651296490c75340e6699846512431d0f9458266199040000000033117060fdc228cc44c081f50ba330130107d62f8cc2b001312803306c4008c900d0001b17509108d8b8808a230608008260c0bd83b20c0121b041086c9410c4b00191040340096c5c40c5110304004130e0eae1899c8018d8c8000061200000250000001304412c100000000b000000641901a0cd50c7c2689649582631d4912896651296490c75340e6699846512431d0fb458266199040000000033117060fdc228cc44c081f50ba330130107d62f8cc2b001312803306c4008c900d0001b17509108d8b8808a230608008260c0bd83b20c0121b041086c9410c8b00191040340096c5c40c5110304004130e0eae1899c8018d8c8000061200000250000001304412c100000000b000000641901a0cd50c7c26c9649582631d4912896651296490c75340e6699846512431d0fd458266199040000000033117060fdc228cc44c081f50ba330130107d62f8cc2b001312803306c4008c900d0001b17509108d8b8808a230608008260c0bd83b20c0121b041086c9410d0b00191040340096c5c40c5110304004130e0eae1899c8018d8c80000612000002b0000001304432c100000000900000054190120cb08006d863a2289b34ec23a89a18e4421ac93b04e62a8a3713aeb24ac930000331180f50ba130130158bf100a331180f50ba1700a20860d082208805300316c401041005001081754e0024bd001081754e0024b8c182000088201370f8d4304c400c2051598650884801a40b8a002b304c24045a50680105c00886103020a02802040b8a002175862c4e00040100cb87eb0b0802840b8a00219000061200000430000001304462c100000000b000000541901a801b28c00d066a863203e2b25ac9418ea4814cf4a092b25863a260a0cac94b05282c833000000000033117760fd0229cc44dc81f50ba430135159bf100a33119bf50ba030136159bf000ac30644e110c0b00141340440c58d8c18140d0882811ed84240c68d8c18140d0882811ee042306280002008061c3d30cd100c1b10481400a4dc0829373262703820080678b00b96108c18140d0882811ef082354d02802012081c3e3c51306c40305400105309b30cc410cc1b0ce41000a30901306c403801018c2608c1b001e10403306250342008067c000edc2c41316250342008067c000edc2c0181f46c083d9631db5009c06c43200473064100000000612000002f0000001304462c1000000003000000541901a80122cf000000000033117760fd0229cc44dc81f50ba430135159bf100a33119bf50ba030136159bf000ac30644a110c0b001412404306c400c48005071232306c6038260e007afc00454dcc834080482482080c22b34c1b001612801404625cc321043306f309043008c2604c0b001810404309a2004c30604120cc08841d1802018f0812d48b304c58841d1802018f0812d48b3040452b2219458c66cc32300b30d8110cc1904010000000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab1300405191630626000200806d73d20c1884101802018e8022b40c306841500c088c10180201890822d0492901300000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab1300405191630626000200806173c20c1884101802018e8022b40c306841500c088c10180201890822d0492901300000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066ef00e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066ed00e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066ec00e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066ea00e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066e800e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066e600e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066e400e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa141000000000331196f50ba0b036824150b001cb221c06051630627000200806a6a00a4350906101331196f50ba0b036423307146cc0b2084e1d506001230607008260600ab13004051916306260002008066e200e4830625000200806bac00ad0b00161050030627000200806a8400b8124e404000061200000220000001304412c10000000030000006419012820fa14100000000033117060fd0228ac8d6010146cc0b208874181058c181c000882012c98c2101464c0c04c041c58bf000a6b23347340c1062c8be0d401051630627000200806b0d00a43509001032306060082601007e08004230605008260a00bac000d1b10560000230607008260200bb01048424e0061200000220000001304412c10000000030000006419012820fa14100000000033117060fd0228ac8d6010146cc0b208874181058c181c000882012c98c2101464c0c04c041c58bf000a6b23347340c1062c8be0d401051630627000200806b0d00a43509001032306060082601007bf8004230605008260a00bac000d1b10560000230607008260200bb01048424e0061200000220000001304412c10000000030000006419012820fa14100000000033117060fd0228ac8d6010146cc0b208874181058c181c000882012c98c2101464c0c04c041c58bf000a6b23347340c1062c8be0d401051630627000200806b0d00a43509001032306060082601007be8004230605008260a00bac000d1b10560000230607008260200bb01048424e0061200000220000001304412c10000000030000006419012820fa14100000000033117060fd0228ac8d6010146cc0b208874181058c181c000882012c98c2101464c0c04c041c58bf000a6b23347340c1062c8be0d401051630627000200806b0d00a43509001032306060082601007bd8004230605008260a00bac000d1b10560000230607008260200bb01048424e0061200000230000001304412c10000000030000006419012820fa141000000000331180f50ba0b036824150b001cb221c06051630627000200806a2c00a43509001001754602602b07e0114d64670e880820d5816e1b1030a2c60c4e00040100c44811686a02003002ea8c0888101802018cc812f24c1884101802018e8822b48c306041600c088c10180201890022e049490150061200000040000001304c1884101842018fcc21904080000712000001f000000320e10228421e50a8862bc8029a70cb892d8802ceb0de8d2ec8030af0f2813098134f31068531d8138b71298e32d813a8513b8c33a813cd313d80348813fc514e8644f814f9a1508e55b8151e2152865688153aa1648e56c8155f2166865798157ba1788e57d81598218a8658a815bca18c8e58e815d93190000000000000000650c000053020000120394a02a00000001000000270700001100000044000000010000005000000001000000580000005f000000400900000000000038070000180000005007000006000000f909000000000000000000005f00000000000000000000003400000095020000100000009502000010000000ffffffff00240000a502000014000000a502000014000000ffffffff08240000b902000006000000b902000006000000ffffffff08240000bf02000016000000bf02000016000000ffffffff08340000d502000018000000d502000018000000ffffffff08240000ed0200001e000000ed0200001e000000ffffffff082400000b030000130000000b03000013000000ffffffff083400001e0300001c0000001e0300001c000000ffffffff002400003a030000120000003a03000012000000ffffffff002400004c030000180000004c03000018000000ffffffff0824000064030000120000006403000012000000ffffffff0024000076030000120000007603000012000000ffffffff0024000088030000180000008803000018000000ffffffff08240000a003000012000000a003000012000000ffffffff00240000b203000018000000b203000018000000ffffffff08240000ca03000012000000ca03000012000000ffffffff00240000dc03000018000000dc03000018000000ffffffff08240000f403000012000000f403000012000000ffffffff0024000006040000180000000604000018000000ffffffff082400001e040000120000001e04000012000000ffffffff0024000030040000180000003004000018000000ffffffff0824000048040000120000004804000012000000ffffffff002400005a040000180000005a04000018000000ffffffff0824000072040000120000007204000012000000ffffffff0024000084040000120000008404000012000000ffffffff0024000096040000120000009604000012000000ffffffff00240000a804000012000000a804000012000000ffffffff00240000ba0400000d000000ba0400000d000000ffffffff00240000c704000015000000c704000015000000ffffffff00240000dc0400000e000000dc0400000e000000ffffffff08240000000000003400000000000000340000000000000010240000ea04000009000000ea04000009000000ffffffff08340000f30400000c000000f30400000c000000ffffffff08340000ff04000011000000ff04000011000000ffffffff08240000100500000b000000100500000b000000ffffffff082400001b0500000c0000001b0500000c000000ffffffff08240000270500000d000000270500000d000000ffffffff08240000340500000e000000340500000e000000ffffffff08240000420500000d000000420500000d000000ffffffff082400004f0500000e0000004f0500000e000000ffffffff082400005d0500000c0000005d0500000c000000ffffffff08240000690500000d000000690500000d000000ffffffff08240000760500000d000000760500000d000000ffffffff08240000830500000e000000830500000e000000ffffffff0824000091050000060000009105000006000000ffffffff0824000097050000170000009705000017000000ffffffff00240000ae05000023000000ae05000023000000ffffffff00240000d105000019000000d105000019000000ffffffff00240000ea05000019000000ea05000019000000ffffffff0024000003060000190000000306000019000000ffffffff002400001c060000190000001c06000019000000ffffffff0024000035060000190000003506000019000000ffffffff002400004e060000190000004e06000019000000ffffffff0024000067060000190000006706000019000000ffffffff0024000080060000190000008006000019000000ffffffff0024000099060000190000009906000019000000ffffffff00240000b206000019000000b206000019000000ffffffff00240000cb06000019000000cb06000019000000ffffffff00240000e406000019000000e406000019000000ffffffff00240000fd06000015000000fd06000015000000ffffffff0024000012070000110000001207000011000000ffffffff0024000023070000040000002307000004000000ffffffff0824000056070000060000003400000004000000ffffffff001800005c0700001f000000380000001d000000ffffffff001800007b070000080000005500000006000000ffffffff00180000830700002b0000005b00000029000000ffffffff00180000ae070000080000008400000006000000ffffffff00180000b6070000210000008a0000001f000000ffffffff00180000d707000008000000a900000006000000ffffffff00180000df07000008000000af00000006000000ffffffff00180000e707000021000000b50000001f000000ffffffff001800000808000008000000d400000006000000ffffffff001800001008000021000000da0000001f000000ffffffff001800003108000008000000f900000006000000ffffffff001800003908000021000000ff0000001f000000ffffffff001800005a080000080000001e01000006000000ffffffff001800006208000021000000240100001f000000ffffffff0018000083080000080000004301000006000000ffffffff001800008b08000021000000490100001f000000ffffffff00180000ac080000080000006801000006000000ffffffff00180000b4080000210000006e0100001f000000ffffffff00180000d5080000090000008d01000007000000ffffffff00180000de08000021000000940100001f000000ffffffff00180000ff08000009000000b301000007000000ffffffff001800000809000009000000ba01000007000000ffffffff001800001109000021000000c10100001f000000ffffffff001800003209000009000000e001000007000000ffffffff001800003b09000021000000e70100001f000000ffffffff001800005c09000021000000060200001f000000ffffffff001800007d09000021000000250200001f000000ffffffff001800009e0900001c000000440200001a000000ffffffff00180000ba090000090000005e02000007000000ffffffff00180000c3090000090000006502000007000000ffffffff00180000cc090000240000006c02000022000000ffffffff00180000f0090000090000008e02000007000000ffffffff00180000000000005d0c000082020000120394f92b0000005f5a5374706c496353743131636861725f747261697473496345536149634545536249545f54305f54315f45524b53365f53385f2e7374725f5f46554e4354494f4e5f5f2e5f5a3130436f6d7061726541676569692e7374722e315f5f46554e4354494f4e5f5f2e5f5a323259616f4d696c6c696f6e616972657350726f626c656d69692e7374722e325f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333241646469692e7374722e332e7374722e345f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333253756269692e7374722e355f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d756c69692e7374722e365f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333244697669692e7374722e375f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d6f6469692e7374722e385f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332416e6469692e7374722e395f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324f727269692e7374722e31305f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332456f7269692e7374722e31312e7374722e31325f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617441646466662e7374722e31335f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617453756266665f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f61744d756c66665f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617444697666665f5f46554e4354494f4e5f5f2e5f5a3854657374426f6f6c62622e7374722e31342e7374722e31355f5f46554e4354494f4e5f5f2e5f5a313054657374537472696e67524b537353305f2e7374722e31365f5a3130436f6d7061726541676569695f5f6778785f706572736f6e616c6974795f76307072696e74665f5a4e33656d7037496e7465676572433145524b69695f5a4e4b33656d7037496e74656765726d6945524b53305f5f5a4e4b33656d7037496e7465676572313072657665616c5f696e7445695f5a4e33656d7037496e7465676572443145765f5a323259616f4d696c6c696f6e616972657350726f626c656d69695f5a313254657374496e74333241646469695f5a4e4b33656d7037496e7465676572706c45524b53305f5f5a313254657374496e74333253756269695f5a313254657374496e7433324d756c69695f5a4e4b33656d7037496e74656765726d6c45524b53305f5f5a313254657374496e74333244697669695f5a4e4b33656d7037496e7465676572647645524b53305f5f5a313254657374496e7433324d6f6469695f5a4e4b33656d7037496e7465676572726d45524b53305f5f5a313254657374496e743332416e6469695f5a4e4b33656d7037496e7465676572616e45524b53305f5f5a313254657374496e7433324f727269695f5a4e4b33656d7037496e74656765726f7245524b53305f5f5a313254657374496e743332456f7269695f5a4e4b33656d7037496e7465676572656f45524b53305f5f5a313254657374466c6f617441646466665f5a313254657374466c6f617453756266665f5a313254657374466c6f61744d756c66665f5a313254657374466c6f617444697666665f5a3854657374426f6f6c62625f5a313054657374537472696e67524b537353305f5f5a4e4b537335635f73747245765f5a4e5373443145765f5a4e5373433145524b53735f5a4e537336617070656e6445524b537352656164566172426f6f6c5772697465566172426f6f6c5265616456617255696e743332577269746556617255696e7433325265616456617255696e743634577269746556617255696e74363452656164566172466c6f61745772697465566172466c6f617452656164566172446f75626c655772697465566172446f75626c656d616c6c6f63506c61744f4e5f656e7472795f436f6d70617265416765506c61744f4e5f656e7472795f59616f4d696c6c696f6e616972657350726f626c656d506c61744f4e5f656e7472795f54657374496e743332416464506c61744f4e5f656e7472795f54657374496e743332537562506c61744f4e5f656e7472795f54657374496e7433324d756c506c61744f4e5f656e7472795f54657374496e743332446976506c61744f4e5f656e7472795f54657374496e7433324d6f64506c61744f4e5f656e7472795f54657374496e743332416e64506c61744f4e5f656e7472795f54657374496e7433324f7272506c61744f4e5f656e7472795f54657374496e743332456f72506c61744f4e5f656e7472795f54657374466c6f6174416464506c61744f4e5f656e7472795f54657374466c6f6174537562506c61744f4e5f656e7472795f54657374466c6f61744d756c506c61744f4e5f656e7472795f54657374466c6f6174446976506c61744f4e5f656e7472795f54657374426f6f6c506c61744f4e5f656e7472795f6672656566726565362e302e31206769742d643637373763637838365f36342d756e6b6e6f776e2d6c696e75782d676e756d6f64756c652e4c2e7374722e4c5f5f46554e4354494f4e5f5f2e5f5a3130436f6d7061726541676569692e4c2e7374722e312e4c5f5f46554e4354494f4e5f5f2e5f5a323259616f4d696c6c696f6e616972657350726f626c656d69692e4c2e7374722e322e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333241646469692e4c2e7374722e332e4c2e7374722e342e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333253756269692e4c2e7374722e352e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d756c69692e4c2e7374722e362e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e74333244697669692e4c2e7374722e372e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324d6f6469692e4c2e7374722e382e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332416e6469692e4c2e7374722e392e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e7433324f727269692e4c2e7374722e31302e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374496e743332456f7269692e4c2e7374722e31312e4c2e7374722e31322e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617441646466662e4c2e7374722e31332e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617453756266662e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f61744d756c66662e4c5f5f46554e4354494f4e5f5f2e5f5a313254657374466c6f617444697666662e4c5f5f46554e4354494f4e5f5f2e5f5a3854657374426f6f6c62622e4c2e7374722e31342e4c2e7374722e31352e4c5f5f46554e4354494f4e5f5f2e5f5a313054657374537472696e67524b537353305f2e4c2e7374722e313600000000000000"

/// Starter -> INVITOR_VALUE_TEMPLATE
#define INVITOR_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219"

/// Participator, use symbol '&' to split, eg:a&b&c -> PARTIES_VALUE_TEMPLATE
#define PARTIES_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219&0x3771c08952f96e70af27324de11bb380ec388ec3"

/// Urls for participators, use symbol '&' to split.
/// URLS -> URLS_VALUE_TEMPLATE
#define URLS_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219$DirectNodeServer:default -h 10.10.8.20 -p 10001,0x3771c08952f96e70af27324de11bb380ec388ec3$DirectNodeServer:default -h 10.10.8.20 -p 10002"

/// Rule of allocation.
/// format:k1:v1,k2:v2,k3:v3 -> PROFIT_RULES_VALUE
#define PROFIT_RULES_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219:1,0x3771c08952f96e70af27324de11bb380ec388ec3:2"

/// Calu method's price -> METHOD_PRICE_VALUE
/// rule:${METHOD}&${VALUE},${METHOD}&${VALUE}
/// eg:
/// func01$10000000000000000,func02$200000000000000,func03$4000000000000000000000000000
#define METHOD_PRICE_VALUE "foo_abs$200"

/// the prefix key of map struct
#define PREFIX_RULES_MAP PREFIX "_MAP_RULE_"
#define PREFIX_RESULT_MAP PREFIX "_MAP_RESULT_"
#define PREFIX_ALLOT_MAP PREFIX "_MAP_ALLOT_"
#define PREFIX_METHOD_MAP PREFIX "_MAP_PRICE_"

class MPC : public platon::Contract {
public:
  // define event.
  PLATON_EVENT(start_calc_event, uint64_t, const char *)
  PLATON_EVENT(set_result_event, uint64_t, const char *)
  PLATON_EVENT(set_fees_event, uint64_t, const char *)

  void init() {
    platon::setState(OWNER, platon::caller().toString()); // save msg.sender
    platon::setState(KEY_INVITORS, INVITOR_VALUE);        // save invitor
    platon::setState(KEY_PARTIES, PARTIES_VALUE);         // save partner
    platon::setState(KEY_URLS, URLS_VALUE);               // save all urls
    platon::setState(KEY_IR, IR_VALUE);                   // save ir data
    init_set_urls();                                      // save each one by id
    init_set_price(); // save price of method
  }

  /// get the owner address of contract.
  const char *get_owner() const {
    std::string _owner_;
    platon::getState(OWNER, _owner_);
    return _owner_.c_str();
  }

  void CompareAge(const char *extra) {start_calc("CompareAge", extra);}
  void YaoMillionairesProblem(const char *extra) {start_calc("YaoMillionairesProblem", extra);}
  void TestInt32Add(const char *extra) {start_calc("TestInt32Add", extra);}
  void TestInt32Sub(const char *extra) {start_calc("TestInt32Sub", extra);}
  void TestInt32Mul(const char *extra) {start_calc("TestInt32Mul", extra);}
  void TestInt32Div(const char *extra) {start_calc("TestInt32Div", extra);}
  void TestInt32Mod(const char *extra) {start_calc("TestInt32Mod", extra);}
  void TestInt32And(const char *extra) {start_calc("TestInt32And", extra);}
  void TestInt32Orr(const char *extra) {start_calc("TestInt32Orr", extra);}
  void TestInt32Eor(const char *extra) {start_calc("TestInt32Eor", extra);}
  void TestFloatAdd(const char *extra) {start_calc("TestFloatAdd", extra);}
  void TestFloatSub(const char *extra) {start_calc("TestFloatSub", extra);}
  void TestFloatMul(const char *extra) {start_calc("TestFloatMul", extra);}
  void TestFloatDiv(const char *extra) {start_calc("TestFloatDiv", extra);}
  void TestBool(const char *extra) {start_calc("TestBool", extra);}

  /// trigger mpc compute.
  void start_calc(const char *method, const char *extra) {

    // check msg.send is valid
    bool _isPartner = is_partner();
    if (!_isPartner) {
      platon::println("Invalid msg.sender, not belong to partners.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Invalid msg.sender, not belong to partners.");
      return;
    }

    // check value is greater than preprice.
    bool is_enough_res = is_enough_price(method);
    if (!is_enough_res) {
      platon::println("insufficient value to the method of ", method);
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Insufficient value for the method.");
      return;
    }

    // gen task id and save value
    std::string task_id_str = gen_task_id();
    const char *task_id = task_id_str.c_str();
    platon::println("New task id: ", task_id);
    bool save_res = save_allot_amount(task_id);
    if (!save_res) {
      platon::println("save allot amount fail");
      PLATON_EMIT_EVENT(start_calc_event, 0, "save allot amount fail");
      return;
    }

    // save task information. INFO_PREFIX + TASK_ID
    std::string task_key_str = KEY_TASK_INFO + task_id_str;
    std::string info_str =
        std::string(method) + COMMON_SPLIT_CHAR + std::string(extra);
    platon::println("save info for task:", "key:=", task_key_str, "info:=", info_str);
    platon::setState(task_key_str, info_str);
    platon::println("start success..");
    platon::println("Finalize task id: ", task_id);
    PLATON_EMIT_EVENT(start_calc_event, 1, task_id);
  }

  /// The result recored, and allot profit to participators.
  void set_result(const char *taskId, uint64_t status, const char *data) {
    // check msg.send is valid
    bool _isPartner = is_partner();
    if (!_isPartner) {
      platon::println(
          "set_result->Invalid msg.sender, not belong to partners.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Invalid msg.sender, not belong to partners.");
      return;
    }

    std::string key_str = PREFIX_RESULT_MAP + std::string(taskId);
    // check result set
    std::string res_value_str;
    platon::getState(key_str, res_value_str);
    if (res_value_str.length() > 1) {
      platon::println("set_result-> set already. Can not reset again.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "set already. Can not reset again.");
      return;
    }

    // save result
    std::string status_str = toString(status);
    std::string data_str = std::string(data);
    std::string value_str = status_str + COMMON_SPLIT_CHAR + data_str;
    platon::println("save result, key: ", key_str, " value:", value_str);
    platon::setState(key_str, value_str);

    // divide the money. equal division.
    if (status != 1) { // 1 success 0 fail.
      platon::println("set_result-> status must equal 1.");
      PLATON_EMIT_EVENT(start_calc_event, 0, "status must equal 1.");
      return;
    }
    platon::u256 amount_i = get_saved_amount(taskId);
    const char *partners_c = get_participants();
    std::string partner_str = std::string(partners_c);
    std::vector<std::string> partner_vec =
        split(partner_str, COMMON_SPLIT_CHAR);

    platon::u256 count_i(partner_vec.size());

    platon::println("part per:", count_i.convert_to<std::string>());
    platon::u256 each_one_i = amount_i / count_i;
    platon::println("avg :", each_one_i.convert_to<std::string>());

    // transfer to partner
    for (unsigned int i = 0; i < partner_vec.size(); ++i) {
      std::string p_str = partner_vec[i];
      platon::println("transfer to:", p_str,
                      " value:", each_one_i.convert_to<std::string>());
      platon::Address _addr(p_str, true);
      platon::callTransfer(_addr, each_one_i);
    }
    platon::println("Set result success.");
    PLATON_EMIT_EVENT(set_result_event, 1, "Setting result success.");
  }

  /// k1:v1,k2:v2,k3:v3
  void set_fees(const char *fees) {
    platon::println("into set_fees...");
    PLATON_EMIT_EVENT(set_fees_event, 1, "set fees done.");
  }

  const char *get_ir_data() const {
    std::string irdata;
    platon::getState(KEY_IR, irdata);
    return irdata.c_str();
  }

  const char *get_participants() const {
    std::string parties;
    platon::getState(KEY_PARTIES, parties);
    platon::println("get_participants:", parties);
    return parties.c_str();
  }

  const char *get_urls() const {
    std::string urls;
    platon::getState(KEY_URLS, urls);
    return urls.c_str();
  }

  const char *get_url_by_id(const char *id) const {
    std::string url;
    std::string key_str = KEY_URLS + std::string(id);
    platon::getState(key_str, url);
    return url.c_str();
  }

  const char *get_result(const char *task_id) const {
    std::string id_str = std::string(task_id);
    std::string key_str = PREFIX_RESULT_MAP + std::string(id_str);
    std::string result;
    platon::getState(key_str, result);
    // std::string value_str = status_str + COMMON_SPLIT_CHAR + data_str;
    std::vector<std::string> partner_vec = split(result, COMMON_SPLIT_CHAR);
    if (partner_vec.size() != 2) {
      return "";
    }
    return partner_vec[1].c_str();
  }

  uint64_t get_status(const char *task_id) const {
    std::string id_str = std::string(task_id);
    std::string key_str = PREFIX_RESULT_MAP + std::string(id_str);
    std::string result;
    platon::getState(key_str, result);
    std::vector<std::string> partner_vec = split(result, COMMON_SPLIT_CHAR);
    if (partner_vec.size() != 2) {
      return 0;
    }
    uint64_t st = stouint64(partner_vec[0]);
    return st;
  }

  const char *get_fee(const char *method) const {
    platon::u256 fee;
    std::string key_str = KEY_METHOD_PRICE + std::string(method);
    platon::getState(key_str, fee);
    platon::println("call get_fee. - ", fee.convert_to<std::string>());
    return fee.convert_to<std::string>().c_str();
  }

  const char *get_invitor() const {
    std::string invitor;
    platon::getState(KEY_INVITORS, invitor);
    return invitor.c_str();
  }

private:
  std::string gen_task_id() const {
    uint64_t nonce_i = getCallerNonce();
    std::string nonce_str = toString(nonce_i);
    platon::h160 caller_h = platon::caller();
    std::string caller_h_str = caller_h.toString();
    platon::println("get nonce: ", nonce_str);
    platon::println("get caller_h_str: ", caller_h_str);
    std::string src_str = nonce_str + caller_h_str;
    char *t_src;
    strcpy(t_src, src_str.c_str());

    platon::h256 sha3_h = platon::sha3((platon::byte *)t_src, strlen(t_src));
    std::string sha3_h_str = sha3_h.toString();
    platon::println("task id : ", sha3_h_str);
    return sha3_h_str;
  }

  bool is_partner() {
    platon::h160 caller_h = platon::caller();
    std::string caller_h_str = caller_h.toString();
    std::string partner_str;
    platon::getState(KEY_PARTIES, partner_str);
    platon::println("Participator :", partner_str);
    platon::println("Caller :", caller_h_str);
    std::string::size_type idx = caller_h_str.find("0x");
    if (idx == std::string::npos) {
      caller_h_str = "0x" + caller_h_str;
    }
    platon::println("Caller End:", caller_h_str);
    std::vector<std::string> partner_vec =
        split(partner_str, COMMON_SPLIT_CHAR);
    for (unsigned int i = 0; i < partner_vec.size(); ++i) {
      platon::println("v_caller:", partner_vec[i]);
      if (strcmp(caller_h_str.c_str(), partner_vec[i].c_str()) == 0) {
        return true;
      }
    }
    return false;
  }

  /// blance is engouth for caller to pay the method's price.
  bool is_enough_price(const char *method) {
    // the price of method.
    platon::u256 fee;
    std::string key_str = KEY_METHOD_PRICE + std::string(method);
    platon::println("is_enough_price : key_str", key_str);
    platon::getState(key_str, fee);
    platon::println("is_enough_price:call get_fee. - ",
                    fee.convert_to<std::string>());
    // the pricee of value to caller.
    platon::u256 _value = platon::callValue();
    platon::println("is_enough_price:call get_value. - ",
                    _value.convert_to<std::string>());
    if (_value >= fee) {
      platon::println("is_enough_price: return true.");
      return true;
    }
    platon::println("is_enough_price: return false.");
    return false;
  }

  /// transfer of value, from user's account to contract's account.
  bool save_allot_amount(const char *task_id) {
    // platon::balance().convert_to<std::string>().c_str();
    platon::u256 value_u = platon::callValue();
    std::string key_str = PREFIX_ALLOT_MAP + std::string(task_id);

    std::string value_str = value_u.convert_to<std::string>();
    platon::println("save_allot_amount: ", key_str, " - ", value_str);
    platon::setState(key_str, value_u);
    return true;
  }

  platon::u256 get_saved_amount(const char *task_id) {
    std::string key_str = PREFIX_ALLOT_MAP + std::string(task_id);
    platon::u256 value_u;
    platon::getState(key_str, value_u);
    platon::println("get_saved_amout: ", value_u.convert_to<std::string>());
    return value_u;
  }

  void init_set_urls() {
    // URLS_VALUE -> "id01$tcpSession:tcp -p 9527,id02$tcpSession:tcp -p
    // 9527,id03$tcpSession:tcp -p 9527"
    char *values = URLS_VALUE;
    char *pattern = ",";
    // ["id01$tcpSession:tcp -p 9527", "id02$tcpSession:tcp -p 9527",
    // "id03$tcpSession:tcp -p 9527"] KEY_URLS + "id01" -> tcpSession:tcp -p
    // 9527
    platon::println("---- begin split ------");
    std::vector<std::string> arr = split(values, pattern);
    for (unsigned int i = 0; i < arr.size(); ++i) {
      char *trim_res = new char[100];
      char *str_in = new char[100];
      strcpy(str_in, arr[i].c_str());

      str_trim(str_in, trim_res);

      std::vector<std::string> id_valule_arr = split(str_in, "$");
      if (id_valule_arr.size() != 2) {
        platon::println("Invalid value str of urls.");
        platon::platonThrow("Invalid value str of urls.");
      }
      // do set state
      std::string _key = KEY_URLS + id_valule_arr[0];
      std::string _value = id_valule_arr[1];
      platon::println("init urls, key : ", _key, " , values: ", _value);
      platon::setState(_key, _value);
      delete[] str_in;
      delete[] trim_res;
    }
  }

  void init_set_price() {
    // METHOD_PRICE_VALUE ->
    // "func01$10000000000000000,func02$200000000000000,func03$4000000000000000000000000000"
    char *values = METHOD_PRICE_VALUE;
    char *pattern = ",";
    // ["func01$10000000000000000", "func01$10000000000000000",
    // "func01$10000000000000000"] PREFIX_METHOD_MAP + "func01" ->
    // 10000000000000000
    platon::println("---- Begin split price ------");

    std::vector<std::string> arr = split(values, pattern);
    platon::println("---- End split price ------", arr.size());
    for (unsigned int i = 0; i < arr.size(); ++i) {
      char *trim_res = new char[100];
      char *str_in = new char[100];
      strcpy(str_in, arr[i].c_str());
      str_trim(str_in, trim_res);

      std::vector<std::string> id_valule_arr = split(str_in, "$");
      if (id_valule_arr.size() != 2) {
        platon::println("Invalid value str of price.");
        platon::platonThrow("Invalid value str of price.");
      }
      // do set state
      std::string key_str = KEY_METHOD_PRICE + id_valule_arr[0];
      std::string value_str = id_valule_arr[1];
      platon::println("init price, key : ", key_str, " , values: ", value_str);
      platon::u256 value_u(value_str);
      platon::setState(key_str, value_u);
      delete[] str_in;
      delete[] trim_res;
    }
  }

private:
  uint64_t stouint64(const std::string &num) const {
    uint64_t res = 0;
    for (size_t i = 0; i < num.length(); i++) {
      res = res * 10 + (num[i] - '0');
    }
    platon::println("stouint64 ", num, "->", res);
    return res;
  }

  std::string toString(uint64_t num) const {
    std::string res;
    while (num != 0) {
      char c = num % 10 + '0';
      num /= 10;
      res.insert(0, 1, c);
    }
    platon::println("toString ", num, "->", res);
    return res;
  }

  std::vector<std::string> split(const std::string &str,
                                 const std::string &pattern) const {
    // const char* convert to char*
    char *strc = new char[std::strlen(str.c_str()) + 1];
    strcpy(strc, str.c_str());
    std::vector<std::string> result_vec;
    char *tmp_str = strtok(strc, pattern.c_str());
    while (tmp_str != NULL) {
      result_vec.push_back(std::string(tmp_str));
      tmp_str = strtok(NULL, pattern.c_str());
    }
    delete[] strc;
    return result_vec;
  }

  void str_trim(char *str_in, char *str_out) {
    int i, j;
    i = 0;
    j = strlen(str_in) - 1;
    while (str_in[i] == ' ') {
      i++;
    }
    while (str_in[j] == ' ') {
      --j;
    }
    strncpy(str_out, str_in + i, j - i + 1);
    str_out[j - i + 1] = '\0'; // end flag
  }
};
} // namespace mpc

PLATON_ABI(mpc::MPC, CompareAge);
PLATON_ABI(mpc::MPC, YaoMillionairesProblem);
PLATON_ABI(mpc::MPC, TestInt32Add);
PLATON_ABI(mpc::MPC, TestInt32Sub);
PLATON_ABI(mpc::MPC, TestInt32Mul);
PLATON_ABI(mpc::MPC, TestInt32Div);
PLATON_ABI(mpc::MPC, TestInt32Mod);
PLATON_ABI(mpc::MPC, TestInt32And);
PLATON_ABI(mpc::MPC, TestInt32Orr);
PLATON_ABI(mpc::MPC, TestInt32Eor);
PLATON_ABI(mpc::MPC, TestFloatAdd);
PLATON_ABI(mpc::MPC, TestFloatSub);
PLATON_ABI(mpc::MPC, TestFloatMul);
PLATON_ABI(mpc::MPC, TestFloatDiv);
PLATON_ABI(mpc::MPC, TestBool);
PLATON_ABI(mpc::MPC, start_calc);
PLATON_ABI(mpc::MPC, get_owner);
PLATON_ABI(mpc::MPC, set_result);
PLATON_ABI(mpc::MPC, get_ir_data);
PLATON_ABI(mpc::MPC, get_participants);
PLATON_ABI(mpc::MPC, get_urls);
PLATON_ABI(mpc::MPC, get_result);
PLATON_ABI(mpc::MPC, get_status);
PLATON_ABI(mpc::MPC, get_fee);
PLATON_ABI(mpc::MPC, get_invitor);
PLATON_ABI(mpc::MPC, get_url_by_id);

#endif