#ifndef PLATON_MPCC_CPP
#define PLATON_MPCC_CPP

#include <platon/platon.hpp>
#include <stdio.h>
#include <stdlib.h>
#include <string>

namespace mpc {

#define COMMON_SPLIT_CHAR "&"
#define OWNER "__OWNER__"

#define PREFIX "__MPC__"
#define PREFIX_BONUS_RULE "__BONUS_RULE__"

#define KEY_IR "__IR__"
#define KEY_PARTIES PREFIX "__PARTIES__"
#define KEY_URLS PREFIX "__URLS__"
#define KEY_INVITORS PREFIX "__INVITOR__"
#define KEY_TASK_INFO PREFIX "__TASK__"
#define KEY_METHOD_PRICE PREFIX "__METHOD_PRICE__"

/// IR data -> IR_VALUE_TEMPLATE
#define IR_VALUE "4243c0de3514000005000000620c30244959bea6eed37e2d4401320500000000210c0000c00d00000b02210002000000130000000781239141c80449061032399201840c250508191e048b628020450242920b42041132143808184b0a32828848901420434688a50019324204490e901124c4504151818ce183e58a04414606511800006d0200001bd426f8ffffffff0170803220c6e11de4411eca611ce8811df2a10de4e11deac11dc8a11cc8a10dc8211dec211dc8a11cda601ee2411ee8a10dcc011edaa01dc2811ed001308770608779280780208774988770100776288736a0877048077668837108077660877900cc211cd8611eca0120d8a11ce6611eda001ee4a11cc6211de6a11cdac01ce0a11dc2811c0073080776988772000877788736300779088776288736808777480777a0877290873628077648877600e8411eeaa11c80c11ddea10dcc411ec2a11dcaa10de0e11dd2c11de8a11ce4a10dca811dd2a11ddac01ddec11dda801dca211ccc0120dce11dda201ddcc11ce6a10dcc011edaa01dc2811ed001308770608779280780708777680375a88776808736a0877010077628877900cc211cd8611eca0120dce11ddac01dc2c11de6a10dcc011edaa01dc2811ed001308770608779280780708777688379488773708772208736d0877290877798873630077868837608077a4007c01cc2811de6a11c00c21ddea10de8411ec2011ee0211ddce11cdaa01dc2811ed00130877060877928078098077a08877158873680077978077a288771a0877790873610877a30077328077968837948077d2807000f00821ec2411ecea11ce8a10dc6011eea0180877270077a48877a68073a00087a080779388772a0873630877208077aa8077928877900d6c01cf0611ee4810dd6a01dda011fd8600de6611eca810dd6601ee6a11ce4800dd6001ff0e00e00a21edc611ec2c11ccaa10dcc011edaa01dc2811ed001308770608779280780a8877928873698877730077a68037360877708077a00cc211cd8611eca01d80033c2ffffffff0fc438bc833cc843398c033db0433eb4813cbc433db80339940339b40139a4833da4033994431bcc433cc8033db48139c0431bb44338d0033a00e6100eec300fe50010e4900ef3100ee2c00ee5d006f4100ee9c00e6d300ee1c00eec300f803984033bcc433900043b94c33ccc431bc0833c94c338a4c33c94431b98033cb443389003600ee1c00ef3500e00e10eefd006e6200fe1d00ee5d006f0f00ee9e00ef4500ef2d006e5c00ee9d00e003dc8433d940330b8c33bb48139c84338b44339b4013cbc433ab8033d94833cb44139b0433ab4431bb8c33bb8431bb0433984833900843bbc431ba4833b98c33cb48139c0431bb44338d0033a00e6100eec300fe50010eef00e6de00ee1e00ef3d006e6000f6dd00ee1400fe800984338b0c33c940340b8c33bb4c13ca4c339b8433990431be84339c8c33bcc431b98033cb4413b84033da003600ee1c00ef3500e00e10eefd006f4200fe1000ff0900eee700e6dd00ee1400fe800984338b0c33c940340cc033d84c338ac431bc0833cbc033d94c338d0c33bc8431b88433d98833994833cb4c13ca4833e9403800700410fe1200fe7500ef4d006e3000ff500c04339b8033da4433db4031d00043d84833c9c4339d0431b98433984033dd4833c94c33c006b600ef8300ff2c0066bd00eed800f6cb006f3300fe5c0066b300ff3500e72c0066b800f78700700510fee300fe1600ee5d006e6000f6dd00ee1400fe800984338b0c33c940340d4c33c94431bccc33b98033db48139b0c33b84033d00e6100eec300fe5006c208600b036148410a401b1816d8affffffff1f000790803220c6e11de4411eca611ce8811df2a10de4e11deac11dc8a11cc8a10dc8211dec211dc8a11cda601ee2411ee8a10dcc011edaa01dc2811ed001308770608779280780208774988770100776288736a0877048077668837108077660877900cc211cd8611eca0120d8a11ce6611eda001ee4a11cc6211de6a11cdac01ce0a11dc2811c0073080776988772000877788736300779088776288736808777480777a0877290873628077648877600e8411eeaa11c80c11ddea10dcc411ec2a11dcaa10de0e11dd2c11de8a11ce4a10dca811dd2a11ddac01ddec11dda801dca211ccc0120dce11dda201ddcc11ce6a10dcc011edaa01dc2811ed001308770608779280780708777680375a88776808736a0877010077628877900cc211cd8611eca0120dce11ddac01dc2c11de6a10dcc011edaa01dc2811ed001308770608779280780708777688379488773708772208736d0877290877798873630077868837608077a4007c01cc2811de6a11c00c21ddea10de8411ec2011ee0211ddce11cdaa01dc2811ed00130877060877928078098077a08877158873680077978077a288771a0877790873610877a30077328077968837948077d2807000f00821ec2411ecea11ce8a10dc6011eea0180877270077a48877a68073a00087a080779388772a0873630877208077aa8077928877900d6c01cf0611ee4810dd6a01dda011fd8600de6611eca810dd6601ee6a11ce4800dd6001ff0e00e00a21edc611ec2c11ccaa10dcc011edaa01dc2811ed001308770608779280780a8877928873698877730077a68037360877708077a00cc211cd8611eca01d86018019000dd06e2f8ffffffff019036108800741b8a6408d280d95028409006cc0662110033d85030429006c886a21982344036c88cf3ffffffff032011e3f00ef2200fe5300ef4c00ef9d006f2f00ef5e00ee4500ee4d006e4900ef6900ee4500e6d300ff1200ff4d006e6000f6dd00ee1400fe800984338b0c33c94034090433acc433888033b94431bd04338a4033bb4c13884033bb0c33c00e6100eec300fe50010ec500ef3300f6d000ff2500ee3900ef3500e6d600ef0d00ee1400e803984033bcc433900843bbc431b98833c84433b94431bc0c33ba4833bd04339c8431b94033ba4433b00f4200ff5500ec0e00eefd006e6200fe1d00ee5d006f0f00ee9e00ef4500ef2d006e5c00ee9d00e6de00eefe00e6dc00ee5100ee60010eef00e6d900eee600ef3d006e6000f6dd00ee1400fe800984338b0c33c940340b8c33bb4813b84833bcc431b98033cb4413b84033da003600ee1c00ef3500e00e10eefd006f3900ee7e00ee5400e6da00fe5200fef300f6d600ef0d006ed100ef4800e803984033bcc433900843bbc431bd0833c84033cc0433ab8c339b4413b84033da003600ee1c00ef3500e00310ff4100ee3b00e6d000ff2f00ef4500ee3400fef200f6d200ef5600ee6500ef2d006f3900efa500e001e00043d84833c9c4339d0431b8c033cd403000fe5e00ef4900ef5d00e740010f4100ef2700ee5400f6d600ee5100ef4500ff2500ef300ac8139e0c33cc8031bac413bb4033eb0c11accc33c94031bacc13ccc4339c8011bac013ee0c11d00443db8c33c84833994431b98033cb4413b84033da003600ee1c00ef3500e00510ff3500e6d300fef600ef4d006e6c00eef100ef400984338b0c33c9403b0c178042001ba0d06f4ffffffff03d00680b4c188026001e860832109c002541b882900ba0d06f5ffffffff0310011200004918000016000000138260c2200cc404a118260885312138260c02924c18046599400406d34c18028399101413026142e04c188a81992014cf04a2309866c20045d2848098201cd30401492608ca326198986682303113026642404d08100000892000009e0000003222080a206485041324a484041324e384a19014124c908c0b84044d1094c41c01921c0014900c003490300054901e0074900200943047000ab4304700066568686820871a3410040154a14182269200200516aea11ac469fcff676a9b4750603193330eec100ef3300f6e500eed000f7aa007a2900ef480820bc298491a077608877998073728877680073dd0835470077a2887732807794043454306695043213636381aa8a3081b1bf4310230d3360eec100ef3300f6e300ff4400e7aa007e3800ef2f00eeef00e7aa007e4500ff2100ef4900eefe00e285898a91b077608877998073798077a20073dd0837140077978077778073dd0037a48877628875f808777480777a0071488d048114248a8a40412745288908d8d0d4ab18106ad94616383855a8a1022412f24528890181212922943484c0cd1146121866ccab0b0d140384508d9209d32c4c430104f19424862c8a710213131310434471014234442a2a14188864ab0404565202189a1a3128450d235d21451c2e4ff881350050a2468a9084c0dd4749834459430f9ff2f44d3bf3802b010ff004cc01801404fb74953440993ffff4234fd0cb54c48804dc43f001330460050d471d21451c2e4ffbf104dffe208c042fc8f8334131149488092a2a952343049504950550918e8aa180d0b4c12541294558806890609da2a44834483107515a241a28183be0ad120d1d040618568906860a0b1423448342c50d90c009d15a241a2018dd20ad120d170466b4300d45688068906377a2b448344431bc515416281e648a2100d75751c6447420301530063013351e3c00ee1300ff3e006e5d00ef0a0077a300bf7100ef0000fe1200eec500e2800203edaa00c22a11862202a62026306a014823143298c41306640075608c60c74e10ac1984144b660ccd0237a108c196e650c823183be64c1986166c4201833d4cd168c1960670c8231c3fc64c1988185c6201833bcd1168c1954690c8231433b6dc19801a5c6201833acd5168c194c4b0c8231037a6dc19861c48c60cc906257306600337f08c60c3ee71ec198812503d808c60cbc1a8c423066f8d980148231c3f806a8108c19d638408b60cc30db413c046306520f52211833b47ca013c198e10c85251833c8a1c00513be74b0033cb0833680877168837b480777208777b8877968837698077b188738c8033788833a700339b0833b90833cd8f006e5d006eda007f8d006f0a0077320077a300772d006e9600774a0077640076d600e7800077a300772d006ee80077a100776a0077320076d100e7a00077a300772d006b3300772a0f48010212164c8489111402384610dc619a885d80101a5100cba3005000004001000c00ea814c6601876610a000008004000801d103ab042318cc31400001000c000003b20ba70856320872900002000000200764022b22543394c01000001001400b003ea113d58045b98080000000030006007742b63300cbc3005000004007000c00e485fb264308729000020000004007640332306c3d00b5300004000000900ec80ea664b867398020000020050006007043b63300cbe300500000400b000c00e687eb2644087290000200000060076402c3406c3f00b5300004000000d00ec80de684b867498020000020070006007a44a63300ce0300500000400f000c00ea89db664508729000020000008007640283506c3100e5300004000001100ec80d66a4b867598020000020090006007645a62300ce23005000004003001c00e08bdb66460872900002000000a008648ae28580e000001000000000000d00ec010891c0509020200000000000000000060883462c60400530000000000400500c010c91e85ad3385001000000002000000001822a5d8f59902300d02000001005800000c91c0cc1fca0000264200000000800b68076088149382730640001400000000000000000c917e52108334308500300000000000000000182285a600066d600a0170000000000000000030440a4f217a0320000a000000000000000086483ee71e720000130200000000000600c010892503d8a00300981200000000003200008648bc1a8c821d9802302902000000006800000c91e45310033c3085005800000000000000001822d1a870e9812904000300001000000000c010e9670352b0035300264500000000800d008021d2f806a8c007a6004c8d00004000001c000043a4350ed0c20f4c01981c01000000003a00008648b31dc4032800c0f40000000000e0010030445a53211b0520002000000000000000008648a41ea4021f9802303502000001007c00000c914855804a0108800500000000000000802152cb073a710aa6004c8d0000400000600000c0108956852715800000000000002000000018228dabf0b40210000b000000000000000043a43314965a0080290000000000200c00001822c9a1c0dd02004c0a0000000000620000c010495e852b1780005800000000000000001822a5ac6039000004000000000000403b0043a49f15c4200d4c21000c00000000000000008648a12b580e000001000000000000d00ec010e976053148035308000300000000000000802152fe0a9603004000000000000000b40330447a61410cd2c01402c00000000000000000608814c782e500001000000000000000ed000c914e591083343085003000000000000000001822a5b36039000004000000000000403b0043a47f16c4200d4c21000c00000000000000008648612d580e000001000000000000d00ec010e9ae0531480353080003000000000000008021526e0b9603004000000000000000b40330447a6f410cd2c01402c00000000000000000608814e382e5000010000000000000000030443a7361d90520000000000000000000008648722e30bd0004000000000000000000c010c9cf85e61780000000000000000000001822adbae08403100000000000000000000043a45c179a710002000000000000000000608864ee82530e40000000000000000000000c91e85d60d20108000000000000000000802112c80bcd3a000100000000000000000030446a79a17907200000000000000000000086483a2f38f10004000000000000000000c01009ed05631e80000000000000000000001822b9bd80d90300000000000000000000004324d317307b00000000000000000000006088e4fb02660f00000000000000000000000c91ec5fc0ec01000000000000000000008021920b0e983d0000000000000000000000304432c301b307000000000000000000000086487e3860f60000000000000000000000c010c91607cc1e00000000000000000000001822b9e380d90300000000000000000000004324931ca23700000000000000000000006088749303f1064000000000000000000000486c10288cda00009005023a000000321e981c19114c908c092647c604435a1801a08612180128020ad0ad3407a5ddf03a1d1464a7c7651da8440609df621da84456d0c02e2d214d291115da30ecd212d2941251c152c12e2d214d29111526b5ecd212d2941251d121d52e2d214d291115a633ecd212d2941251a135c32e2d214d2911156814edd212d2941251e1391115e81b94e6a01219444fb7cb731688fea687d9a0f17b4e47d5e7291da8640685ed6579f85c46d5e7291da864a603ed4a7390bc3cafb3e9a85e909d1e9741a53948f816a774a0125941091aac346869a0d2e0a541490393067c0dbc24611b514178230000000000b1180000740000003308801cc4e11c6614013d88433884c38c4280077978077398710ce6000fed100ef4800e330c421ec2c11dcea11c6630053d88433884831bcc033dc8433d8c033dcc788c7470077b08077948877070077a700376788770208719cc110eec900ee1300f6e300fe3f00ef0500e3310c41dde211cd8211dc2611e6630893bbc833bd04339b4033cbc833c84033bccf0147660077b680737688772680737808770908770600776280776f8057678877780875f08877118877298877998812ceef00eeee00ef5c00eec300362c8a11ce4a11ccca11ce4a11cdc611cca211cc4811dca6106d6904339c84339984339c84339b8c33894433888033b94c32fbc833cfc823bd4033bb0c30cc7698770588772708374680778608774188774a08719ce530fee000ff2500ee4900ee3400fe1200eec500e3320281ddcc11ec2411ed2211cdc811edce01ce4e11dea011e66185138b0433a9c833bcc50247660077b68073760877778077898514cf4900ff0500e331e6a1eca611ce8211ddec11d7e011ee4a11ccc211df0610654858338ccc33bb0433dd04339fcc23ce4433b88c33bb0c38cc50a877998877718877408077a28077298815ce3100eecc00ee5500ef33023c1d2411ee4e117d8e11dde011e00000000792000006a000000621e482043880c19391924909140c6c8c86822500814329e18192147c8905144981c01005f1ac4c125076c50290000002f4641494c49464d49534d415443483a225f4d53435f5645523d31393030222f4641494c49464d49534d415443483a225f4954455241544f525f44454255475f4c4556454c3d30222f4641494c49464d49534d415443483a2252756e74696d654c6962726172793d4d545f53746174696352656c65617365222f44454641554c544c49423a6c696263706d742e6c69622f4641494c49464d49534d415443483a225f4352545f535444494f5f49534f5f574944455f535045434946494552533d3022636c616e672076657273696f6e20362e302e312028746167732f52454c454153455f3630312f66696e616c294e756d5265676973746572506172616d657465727377636861725f73697a6500000023088d2d8c2034b73082d0e0c20c41304320cc100c3304c40c41314360cc30248732c390208b8c042628273636bb3617b634b7b53239973738bab437b7b9518a85699c27153636bb369734b23237ba510228233636bb3697b637b23ab6321733b6b0b3b951844802a91800000b0000000b0a7228877780077a587098433db8c338b04339d0c382e61cc6a10de8411ec2c11de6211de8211ddec11d00d11000000600000007cc3ca4833b9c033b94033da0833c94433890c30100000061200000960000001304532c1000000014000000d450c09a0c2431d4311041730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d4912844730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280deca10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c040100000000612000001d0000001304412c1000000003000000d45008243102405423000000331152630ba33013d134b6300a331152630ba33013c10f8d2d84c2b0014120037084c46e002140860d082218002224061d1263c4a00040100c5ac115c860c4000140100c6ac115024119860d8824188061030261068092869101000061200000110000001304412c10000000010000009431020033115b630ba3306c4004c30050b0312ee8db1324760308817741df6e8da1f8c060d88008c06000b6c66080c1376c4004c900e40161200000160000001304452c1000000001000000b4370200331162d0d80229cc442c8d2d90c234060082484094422a0c1b10424000d32097292202c107ab3008d32097292203710aaa601038732018c0dc811004230604068260900aaba0000061200000150000001304c14c041934b6300a331164d0d8c228cc448841630ba4301321068d2d90c2b001411403306c400cc600104132460c8c8c25c1c00f622118882019230646c69260e007b2100c230647058260000ab1900c0402612000003a00000013044b2c1000000003000000b45002454142230035000000331171d0d8c228cc442c8d2d90c24cc4d2d80229cc442c8d2d90c24cc4d2d802290c1b10853200b30c8170501133460c0a8025c1c00e6e211836208c8000460c8c8b25c1800f6ea1316609945986a150661988422124668c1814004b82811de84260812302c306441210c0888171b12418f0c12e44c92c4132cb601c0d313163c4a00058120cecc017820a221a3620988000460c8c8b25c1800f7ea1626609108262c6884101b02418d8813804165822508145c306041410c0888171b12418f0013968d02c01324b90cc12280800000061200000070000001304c14c441c34b6300ac30644200c000531638b0c81a651b040320061200000070000001304c14c441c34b6300ac30644200c000531638b0c81a651b0403200612000000d0000001304c14c04d3d8c228cc44c441630ba3306c4008c3000c1b1001310014c48c2d32041c4704c3a060810c1b10434000490000000061200000100000001304412c1000000002000000d450102434020000331164d0d8c2280c1b1041310014908c3d32045d7786c49e20b1230609008260300ab02004c761200000000061200000260000001304412c1000000002000000d450102434020000331171d0d8c228cc44c441630ba33013b134b6400a331162d0d80229cc448841630ba4306c4014c8000c1b1044320044c48c1b24f604891d31480010048351a00521509464c4a00058120cec00170a4a62c619127b82c48e1824000882c128e08210384e336250002c090676c00b881541080c1b104c40002306c6c59260c007b9303108612000000d0000001304c14c04d3d8c228cc44c441630ba3306c4008c3000c1b1001310014c48c2d32041c4704c3a060810c1b10434000490000000061200000140000001304412c1000000002000000d450102434020000331171d0d8c228cc449041630ba3306c4008c5000c1b1081310014908c3d32049e4744cc3841624f90d811830400413018055910822441b20000000061200000180000001304c14c84d4d8c228cc44d042630ba330132135b6300a3311acd0d8c2280c1b10443100c306c4600cc0b001211c03306c4004c80010213188a01a44480c2298c6880101802018dc022b50b040460c120004c120175a211888c2c800000000006120000002000000130441a60300000061200000960000001304532c1000000014000000d450c09a0c2431d4311046730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d4912847730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280dc0a10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c04010000000061200000960000001304532c1000000014000000d450c09a0c2431d4311048730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d4912849730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280d7ca10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c04010000000061200000960000001304532c1000000014000000d450c09a0c2431d431104a730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d491284b730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280d78a10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c04010000000061200000960000001304532c1000000014000000d450c09a0c2431d431104c730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d491284d730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280d74a10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c04010000000061200000960000001304532c1000000014000000d450c09a0c2431d431104e730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d491284f730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280d70a10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c04010000000061200000960000001304532c1000000014000000d450c09a0c2431d4311050730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d4912851730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280d6ca10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c04010000000061200000960000001304532c1000000014000000d450c09a0c2431d4311052730bcd2d0c750402d0dc42730b431d852134b7d0dcc250c7810ccd2d34b730d4912853730bcd2d50db180108822008822008f2ff30460082200882204cd2ab48d0de08000033114d630ba33013d134b6300a33114d630ba33013a135b6300a33115a630ba33013a135b6300a331163d0d80229cc44348d2d8cc24cc41834b6400a331162d0d80229cc448841630ba43013d134b6300ac30604630dc0b001b15c03306c4028d50010d33088691823060800826030c5436505c288c111b1241874f1c03872304d12992212489d3c30501c4c7300a68808d1270fcc88412181201894813c30c306c4420703304b30d0d230286a18c30d428006b30c04128c1810000882c119d0c34cc41a34b6300e7b6508f2200fa6492653440a280d68a10aa86910ca1411036a837a988411830200413078837a2066090e921a86057d0002c30604150cc02cc13062504820080665b00fd3344905824802c9813d4453350d628120a24074500f5234cd019822b24076400fd2056d56011848056040d4358c0bdaac8680a63900534418c80ef621bba0cd2a3803a9e00c88c8a0614cb300208834d0a4126df00681604c8300a68838101e80c418a8c2050d306c407cc100d0d730a6510010441e6872093898833708280c1ac6884151b02418e80149a0c1884151b02418e80149a4c1884151b02418e80149a841063307821b00730742108c1814054b82811e94441a0c1c0841347320bc0130772004c1884151b02418e88149acc1c08110483307021c00730742108c1814054b82811e9c441b0c1c04010000000061200000280000001304c14c44d3d8c228cc44348d2d8cc2b001210c03306c4004c40090d030486818230606008260e080432050d130a86818230606008260e09c422010d230086918230606008260e0a04220d0d230686918230606008260e0a4422090d330c86918230606008260e0a8422050d430286a18230606008260e0ac422010d530886a18230606008260e0b04220d0d530e86a18230606008260e0b44220e41c00000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838ed8004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838b18004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838af8004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838ad8004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838ab8004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838a98004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838a78004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838a58004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000210000001304412c1000000002000000b45040d45040000033114d630ba0b02484a2a34002ac06c1f8286800230607008260f00b77300405190d6026a2696c01149684c094010512603508cd1950d000460c0e0004c1e017fc60080a321ac088810180201838a38004230605008260300f79100d1b10550000230607008260100ea11044424a000061200000040000001304c1884101842018bcc11620000000712000001f000000320e10228414c20c68a1dd8018f90d98c1e8801ea40ef8b1eb8020f70e3802f88024890f5882f98026aa0f8822fd802ae10fd872ff802e91100853098132ad1148532c8136dd1388534f813a8d16c8537a813ebd18a8748e814b8a19c8d49a814dd019e8349f814f961a0895ab8151dc1a28f5af8153a21b0000000000000000650c000059020000120394b82a000000010000009b0c0000050000004400000001000000500000002200000060010000550000005809000000000000a00c00001f000000bf0c00000600000053190000c7000000000000005500000000000000ed0c0000070000000e0d000016000000240d00007d000000020e0000ed000000ef0e0000cf000000be0f00004200000037100000430000007a10000047000000c1100000a70000006811000070000000f2110000480000004b120000990000000a1300000c000000161300001d0000006416000044000000a816000022000000ca1600004b000000151700004d000000621700001a0000007c17000039000000b517000022000000d717000018000000ef17000021000000101800001a0000002a180000220000004c180000180000006418000022000000861800001a000000a018000022000000c21800001a000000dc18000022000000fe1800001a0000001819000021000000391900001a000000c50c0000150000004e08000016000000ffffffff00240000da0c0000130000006408000012000000ffffffff08240000ed0c00000700000003030000060000000000000010240000f40c00001a000000760800001b000000ffffffff083400000e0d00001600000009030000170000000100000010360000240d00007d000000200300007e0000000200000010240000a10d00000f000000910800000e000000ffffffff082c0000b00d0000210000009f08000022000000ffffffff08240000d10d00001f000000c108000020000000ffffffff08240000f00d000012000000e108000011000000ffffffff082c0000020e0000ed0000009e030000ee0000000300000010240000ef0e0000cf0000008c040000d00000000400000010240000be0f0000420000005c0500004300000005000000102400000010000021000000f208000022000000ffffffff0824000021100000160000001409000017000000ffffffff0834000037100000430000009f0500004400000006000000102400007a10000047000000e3050000480000000700000010360000c1100000a70000002b060000a800000008000000102400006811000070000000d3060000710000000900000010240000d81100001a0000002b09000019000000ffffffff082c0000f21100004800000044070000490000000a000000103600003a120000110000004409000010000000ffffffff082400004b120000990000008d0700009a0000000b00000010360000e412000016000000540900000f000000ffffffff08240000fa12000010000000630900000f000000ffffffff082400000a1300000c000000270800000b0000000c00000010240000161300001d000000320800001c0000000d0000001024000033130000180000007209000017000000ffffffff082400004b130000150000008909000016000000ffffffff0024000060130000210000009f09000022000000ffffffff082400008113000015000000c109000016000000ffffffff002400009613000021000000d709000022000000ffffffff08240000b713000015000000f909000016000000ffffffff00240000cc130000210000000f0a000022000000ffffffff08240000ed13000015000000310a000016000000ffffffff002400000214000021000000470a000022000000ffffffff082400002314000015000000690a000016000000ffffffff0024000038140000210000007f0a000022000000ffffffff082400005914000015000000a10a000016000000ffffffff002400006e14000021000000b70a000022000000ffffffff082400008f14000015000000d90a000016000000ffffffff00240000a414000021000000ef0a000022000000ffffffff08240000c514000015000000110b000016000000ffffffff00240000da1400000c000000270b00000b000000ffffffff08240000e61400000d000000320b00000c000000ffffffff08240000f31400000e0000003e0b00000d000000ffffffff08240000011500000f0000004b0b00000e000000ffffffff08240000101500000e000000590b00000d000000ffffffff082400001e1500000f000000660b00000e000000ffffffff082400002d1500000d000000740b00000c000000ffffffff082400003a1500000e000000800b00000d000000ffffffff08240000481500000e0000008d0b00000d000000ffffffff08240000561500000f0000009a0b00000e000000ffffffff082400006515000007000000a80b000006000000ffffffff082400006c15000019000000ae0b000018000000ffffffff002400008515000019000000c60b000018000000ffffffff002400009e15000019000000de0b000018000000ffffffff00240000b715000019000000f60b000018000000ffffffff00240000d0150000190000000e0c000018000000ffffffff00240000e915000019000000260c000018000000ffffffff0024000002160000190000003e0c000018000000ffffffff002400001b16000019000000560c000018000000ffffffff0024000034160000190000006e0c000018000000ffffffff002400004d16000012000000860c000011000000ffffffff002400005f16000005000000970c000004000000ffffffff08240000641600004400000000000000450000000e00000010160000a81600002200000045000000230000000f00000010160000ca1600004b000000680000004c0000001000000010160000151700004d000000b40000004e0000001100000010160000621700001a000000020100001b00000012000000101600007c170000390000001d0100003a0000001300000010040000b51700002200000057010000230000001400000010160000d7170000180000007a010000190000001500000010160000ef1700002100000093010000220000001600000010160000101800001a000000b50100001b00000017000000101600002a18000022000000d00100002300000018000000101600004c18000018000000f301000019000000190000001016000064180000220000000c020000230000001a00000010160000861800001a0000002f0200001b0000001b00000010160000a0180000220000004a020000230000001c00000010160000c21800001a0000006d0200001b0000001d00000010160000dc1800002200000088020000230000001e00000010160000fe1800001a000000ab0200001b0000001f000000101600001819000021000000c6020000220000002000000010160000391900001a000000e80200001b0000002100000010160000000000005d0c00008a0600001203943a6c000000013f3f5f43405f30424d404e4944444b4d4c4e403f244346733f35696e7075743f35416c6963653f333f353f244346643f35426f623f333f353f244346643f363f24414140013f3f5f43405f304d404a4c4443494348504054657374506572664164643f24414140013f3f5f43405f304441405043494e4648484c403f244346733f353f244346643f3574696d65733f303f35746f74616c3f35636f73743f24434975733f24434a3f333f353f244346663f3540013f3f5f43405f30424f40434a4b4d4c424c4b403f244346733f35726573756c743f2443493f24444e416c6963653f353f244346733f35426f623f24434a3f333f353f244346643f363f24414140013f3f5f43405f30314d4946474241474a403f24434c3f24414140013f5f4f7074696f6e7353746f72616765403f313f3f5f5f6c6f63616c5f737464696f5f7072696e74665f6f7074696f6e7340403940345f4b41013f3f5f43405f304d40434b4a4d48444b4b4054657374506572665375623f24414140013f3f5f43405f30314a4f414d4c484f50403f393f24414140013f3f5f43405f304d40454e4a484f49494054657374506572664d756c3f24414140013f3f5f43405f30314e42454e43424349403f24434b3f24414140013f3f5f43405f304d404e4d4d414a424d4e4054657374506572664469763f24414140013f3f5f43405f30314b4d444b4e46474e403f313f24414140013f3f5f43405f304d404e4e4c424e4343474054657374506572664d6f643f24414140013f3f5f43405f303146474e46444e4f48403f2443463f24414140013f3f5f43405f304d404a474b4641484b4a405465737450657266416e643f24414140013f3f5f43405f3031484e5049474f4345403f2443473f24414140013f3f5f43405f304d4048504e4f4a50464a4054657374506572664f72723f24414140013f3f5f43405f3031444e4b4d4e4c504b403f24484d3f24414140013f3f5f43405f304d40454a4e4550424f405465737450657266456f723f24414140013f3f5f43405f30314a4b424f4a4e4e4b403f24464f3f244141407072696e7466013f3f30496e746567657240656d70404051414540585a013f6e6f774073797374656d5f636c6f636b406368726f6e6f40737464404053413f41563f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a474941404073746440404032334040323340585a013f3f243f475573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403132405633313240406368726f6e6f40737464404059413f41563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403031404142563f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403233404030314030405a013f3f246475726174696f6e5f6361737440563f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040406368726f6e6f4073746440405f4a553f24726174696f4024303024304a494a4749414040334058406368726f6e6f40737464404059413f41563f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040403031404142563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040303140405a013f636f756e74403f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040406368726f6e6f4073746440405142455f4a585a013f636f756e74403f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040406368726f6e6f4073746440405142455f4a585a013f3f243f305f4a58403f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040406368726f6e6f4073746440405141454041425f4a405a013f74696d655f73696e63655f65706f6368403f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040323340406368726f6e6f4073746440405142453f41563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040323340585a013f3f243f475f4a553f24726174696f4024303024304a494a474941404073746440405f4a55303140406368726f6e6f40737464404059413f41563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403031404142563230314030405a013f3f243f305f4a58403f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040406368726f6e6f4073746440405141454041425f4a405a013f3f303f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040323340406368726f6e6f407374644040514145404142563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040313240405a5f76667072696e74665f6c5f5f6c6f63616c5f737464696f5f7072696e74665f6f7074696f6e73013f546573745065726641646440405941484848405a5f5f4378784672616d6548616e646c657233013f3f30496e746567657240656d7040405141454041424848405a6c6c766d2e737461636b73617665013f3f48496e746567657240656d7040405142453f4156303140414256303140405a013f3f34496e746567657240656d70404051414541415630314056303140405a6c6c766d2e737461636b726573746f7265013f72657665616c5f696e7440496e746567657240656d7040405142455f4a48405a013f3f31496e746567657240656d70404051414540585a6c6c766d2e6d656d6370792e703069382e703069382e6933325f5874696d655f6765745f7469636b735f5f7374645f7465726d696e6174655f5f616372745f696f625f66756e635f5f737464696f5f636f6d6d6f6e5f76667072696e7466013f546573745065726653756240405941484848405a013f3f47496e746567657240656d7040405142453f4156303140414256303140405a013f54657374506572664d756c40405941484848405a013f3f44496e746567657240656d7040405142453f4156303140414256303140405a013f546573745065726644697640405941484848405a013f3f4b496e746567657240656d7040405142453f4156303140414256303140405a013f54657374506572664d6f6440405941484848405a013f3f4c496e746567657240656d7040405142453f4156303140414256303140405a013f5465737450657266416e6440405941484848405a013f3f49496e746567657240656d7040405142453f4156303140414256303140405a013f54657374506572664f727240405941484848405a013f3f55496e746567657240656d7040405142453f4156303140414256303140405a013f5465737450657266456f7240405941484848405a013f3f54496e746567657240656d7040405142453f4156303140414256303140405a013f5465737450657266416c6c40405941484848405a52656164566172426f6f6c5772697465566172426f6f6c5265616456617255696e743332577269746556617255696e7433325265616456617255696e743634577269746556617255696e74363452656164566172466c6f61745772697465566172466c6f617452656164566172446f75626c655772697465566172446f75626c656d616c6c6f63506c61744f4e5f656e7472795f5465737450657266416464506c61744f4e5f656e7472795f5465737450657266537562506c61744f4e5f656e7472795f54657374506572664d756c506c61744f4e5f656e7472795f5465737450657266446976506c61744f4e5f656e7472795f54657374506572664d6f64506c61744f4e5f656e7472795f5465737450657266416e64506c61744f4e5f656e7472795f54657374506572664f7272506c61744f4e5f656e7472795f5465737450657266456f72506c61744f4e5f656e7472795f5465737450657266416c6c506c61744f4e5f656e7472795f6672656566726565362e302e31693638362d70632d77696e646f77732d6d73766331392e31352e32363732396d6f64756c653f546573745065726641646440405941484848405a5f5f5f4378784672616d6548616e646c6572335f7072696e74663f3f30496e746567657240656d7040405141454041424848405a3f3f30496e746567657240656d70404051414540585a3f6e6f774073797374656d5f636c6f636b406368726f6e6f40737464404053413f41563f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a474941404073746440404032334040323340585a5f6c6c766d2e737461636b736176653f3f48496e746567657240656d7040405142453f4156303140414256303140405a3f3f34496e746567657240656d70404051414541415630314056303140405a5f6c6c766d2e737461636b726573746f72653f3f243f475573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403132405633313240406368726f6e6f40737464404059413f41563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403031404142563f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403233404030314030405a3f3f246475726174696f6e5f6361737440563f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040406368726f6e6f4073746440405f4a553f24726174696f4024303024304a494a4749414040334058406368726f6e6f40737464404059413f41563f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040403031404142563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040303140405a3f636f756e74403f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040406368726f6e6f4073746440405142455f4a585a3f72657665616c5f696e7440496e746567657240656d7040405142455f4a48405a3f3f31496e746567657240656d70404051414540585a3f636f756e74403f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040406368726f6e6f4073746440405142455f4a585a3f3f243f305f4a58403f246475726174696f6e405f4a553f24726174696f402430302430504543454140407374644040406368726f6e6f4073746440405141454041425f4a405a3f74696d655f73696e63655f65706f6368403f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040323340406368726f6e6f4073746440405142453f41563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040323340585a3f3f243f475f4a553f24726174696f4024303024304a494a474941404073746440405f4a55303140406368726f6e6f40737464404059413f41563f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040403031404142563230314030405a5f6c6c766d2e6d656d6370792e703069382e703069382e6933323f3f243f305f4a58403f246475726174696f6e405f4a553f24726174696f4024303024304a494a47494140407374644040406368726f6e6f4073746440405141454041425f4a405a5f5f5874696d655f6765745f7469636b733f3f303f2474696d655f706f696e74405573797374656d5f636c6f636b406368726f6e6f407374644040563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040323340406368726f6e6f407374644040514145404142563f246475726174696f6e405f4a553f24726174696f4024303024304a494a4749414040737464404040313240405a5f5f696d705f5f5f5f7374645f7465726d696e6174655f5f5f616372745f696f625f66756e635f5f76667072696e74665f6c5f5f5f6c6f63616c5f737464696f5f7072696e74665f6f7074696f6e735f5f5f737464696f5f636f6d6d6f6e5f76667072696e74663f546573745065726653756240405941484848405a3f3f47496e746567657240656d7040405142453f4156303140414256303140405a3f54657374506572664d756c40405941484848405a3f3f44496e746567657240656d7040405142453f4156303140414256303140405a3f546573745065726644697640405941484848405a3f3f4b496e746567657240656d7040405142453f4156303140414256303140405a3f54657374506572664d6f6440405941484848405a3f3f4c496e746567657240656d7040405142453f4156303140414256303140405a3f5465737450657266416e6440405941484848405a3f3f49496e746567657240656d7040405142453f4156303140414256303140405a3f54657374506572664f727240405941484848405a3f3f55496e746567657240656d7040405142453f4156303140414256303140405a3f5465737450657266456f7240405941484848405a3f3f54496e746567657240656d7040405142453f4156303140414256303140405a3f5465737450657266416c6c40405941484848405a5f52656164566172426f6f6c5f5772697465566172426f6f6c5f5265616456617255696e7433325f577269746556617255696e7433325f5265616456617255696e7436345f577269746556617255696e7436345f52656164566172466c6f61745f5772697465566172466c6f61745f52656164566172446f75626c655f5772697465566172446f75626c655f6d616c6c6f635f506c61744f4e5f656e7472795f54657374506572664164645f506c61744f4e5f656e7472795f54657374506572665375625f506c61744f4e5f656e7472795f54657374506572664d756c5f506c61744f4e5f656e7472795f54657374506572664469765f506c61744f4e5f656e7472795f54657374506572664d6f645f506c61744f4e5f656e7472795f5465737450657266416e645f506c61744f4e5f656e7472795f54657374506572664f72725f506c61744f4e5f656e7472795f5465737450657266456f725f506c61744f4e5f656e7472795f5465737450657266416c6c5f506c61744f4e5f656e7472795f667265655f667265653f3f5f43405f30424d404e4944444b4d4c4e403f244346733f35696e7075743f35416c6963653f333f353f244346643f35426f623f333f353f244346643f363f244141403f3f5f43405f304d404a4c4443494348504054657374506572664164643f244141403f3f5f43405f304441405043494e4648484c403f244346733f353f244346643f3574696d65733f303f35746f74616c3f35636f73743f24434975733f24434a3f333f353f244346663f35403f3f5f43405f30424f40434a4b4d4c424c4b403f244346733f35726573756c743f2443493f24444e416c6963653f353f244346733f35426f623f24434a3f333f353f244346643f363f244141403f3f5f43405f30314d4946474241474a403f24434c3f244141403f5f4f7074696f6e7353746f72616765403f313f3f5f5f6c6f63616c5f737464696f5f7072696e74665f6f7074696f6e7340403940345f4b413f3f5f43405f304d40434b4a4d48444b4b4054657374506572665375623f244141403f3f5f43405f30314a4f414d4c484f50403f393f244141403f3f5f43405f304d40454e4a484f49494054657374506572664d756c3f244141403f3f5f43405f30314e42454e43424349403f24434b3f244141403f3f5f43405f304d404e4d4d414a424d4e4054657374506572664469763f244141403f3f5f43405f30314b4d444b4e46474e403f313f244141403f3f5f43405f304d404e4e4c424e4343474054657374506572664d6f643f244141403f3f5f43405f303146474e46444e4f48403f2443463f244141403f3f5f43405f304d404a474b4641484b4a405465737450657266416e643f244141403f3f5f43405f3031484e5049474f4345403f2443473f244141403f3f5f43405f304d4048504e4f4a50464a4054657374506572664f72723f244141403f3f5f43405f3031444e4b4d4e4c504b403f24484d3f244141403f3f5f43405f304d40454a4e4550424f405465737450657266456f723f244141403f3f5f43405f30314a4b424f4a4e4e4b403f24464f3f24414140202f4641494c49464d49534d415443483a225f4d53435f5645523d3139303022202f4641494c49464d49534d415443483a225f4954455241544f525f44454255475f4c4556454c3d3022202f4641494c49464d49534d415443483a2252756e74696d654c6962726172793d4d545f53746174696352656c6561736522202f44454641554c544c49423a6c696263706d742e6c6962202f4641494c49464d49534d415443483a225f4352545f535444494f5f49534f5f574944455f535045434946494552533d3022000000000000"

/// Starter -> INVITOR_VALUE_TEMPLATE
#define INVITOR_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219"

/// Participator, use symbol '&' to split, eg:a&b&c -> PARTIES_VALUE_TEMPLATE
#define PARTIES_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219&0x3771c08952f96e70af27324de11bb380ec388ec3"

/// Urls for participators, use symbol '&' to split.
/// URLS -> URLS_VALUE_TEMPLATE
#define URLS_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219$DirectNodeServer:default -h 10.10.8.20 -p 10001,0x3771c08952f96e70af27324de11bb380ec388ec3$DirectNodeServer:default -h 10.10.8.20 -p 10002"

/// Rule of allocation.
/// format:k1:v1,k2:v2,k3:v3 -> PROFIT_RULES_VALUE
#define PROFIT_RULES_VALUE "0x60ceca9c1290ee56b98d4e160ef0453f7c40d219:1,0x3771c08952f96e70af27324de11bb380ec388ec3:2"

/// Calu method's price -> METHOD_PRICE_VALUE
/// rule:${METHOD}&${VALUE},${METHOD}&${VALUE}
/// eg:
/// func01$10000000000000000,func02$200000000000000,func03$4000000000000000000000000000
#define METHOD_PRICE_VALUE "foo_abs$200"

/// the prefix key of map struct
#define PREFIX_RULES_MAP PREFIX "_MAP_RULE_"
#define PREFIX_RESULT_MAP PREFIX "_MAP_RESULT_"
#define PREFIX_ALLOT_MAP PREFIX "_MAP_ALLOT_"
#define PREFIX_METHOD_MAP PREFIX "_MAP_PRICE_"

class MPC : public platon::Contract {
public:
  // define event.
  PLATON_EVENT(start_calc_event, uint64_t, const char *)
  PLATON_EVENT(set_result_event, uint64_t, const char *)
  PLATON_EVENT(set_fees_event, uint64_t, const char *)

  void init() {
    platon::setState(OWNER, platon::caller().toString()); // save msg.sender
    platon::setState(KEY_INVITORS, INVITOR_VALUE);        // save invitor
    platon::setState(KEY_PARTIES, PARTIES_VALUE);         // save partner
    platon::setState(KEY_URLS, URLS_VALUE);               // save all urls
    platon::setState(KEY_IR, IR_VALUE);                   // save ir data
    init_set_urls();                                      // save each one by id
    init_set_price(); // save price of method
  }

  /// get the owner address of contract.
  const char *get_owner() const {
    std::string _owner_;
    platon::getState(OWNER, _owner_);
    return _owner_.c_str();
  }

  void TestPerfAdd(const char *extra) {start_calc("TestPerfAdd", extra);}
  void TestPerfSub(const char *extra) {start_calc("TestPerfSub", extra);}
  void TestPerfMul(const char *extra) {start_calc("TestPerfMul", extra);}
  void TestPerfDiv(const char *extra) {start_calc("TestPerfDiv", extra);}
  void TestPerfMod(const char *extra) {start_calc("TestPerfMod", extra);}
  void TestPerfAnd(const char *extra) {start_calc("TestPerfAnd", extra);}
  void TestPerfOrr(const char *extra) {start_calc("TestPerfOrr", extra);}
  void TestPerfEor(const char *extra) {start_calc("TestPerfEor", extra);}
  void TestPerfAll(const char *extra) {start_calc("TestPerfAll", extra);}

  /// trigger mpc compute.
  void start_calc(const char *method, const char *extra) {

    // check msg.send is valid
    bool _isPartner = is_partner();
    if (!_isPartner) {
      platon::println("Invalid msg.sender, not belong to partners.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Invalid msg.sender, not belong to partners.");
      return;
    }

    // check value is greater than preprice.
    bool is_enough_res = is_enough_price(method);
    if (!is_enough_res) {
      platon::println("insufficient value to the method of ", method);
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Insufficient value for the method.");
      return;
    }

    // gen task id and save value
    std::string task_id_str = gen_task_id();
    const char *task_id = task_id_str.c_str();
    platon::println("New task id: ", task_id);
    bool save_res = save_allot_amount(task_id);
    if (!save_res) {
      platon::println("save allot amount fail");
      PLATON_EMIT_EVENT(start_calc_event, 0, "save allot amount fail");
      return;
    }

    // save task information. INFO_PREFIX + TASK_ID
    std::string task_key_str = KEY_TASK_INFO + task_id_str;
    std::string info_str =
        std::string(method) + COMMON_SPLIT_CHAR + std::string(extra);
    platon::println("save info for task:", "key:=", task_key_str, "info:=", info_str);
    platon::setState(task_key_str, info_str);
    platon::println("start success..");
    platon::println("Finalize task id: ", task_id);
    PLATON_EMIT_EVENT(start_calc_event, 1, task_id);
  }

  /// The result recored, and allot profit to participators.
  void set_result(const char *taskId, uint64_t status, const char *data) {
    // check msg.send is valid
    bool _isPartner = is_partner();
    if (!_isPartner) {
      platon::println(
          "set_result->Invalid msg.sender, not belong to partners.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "Invalid msg.sender, not belong to partners.");
      return;
    }

    std::string key_str = PREFIX_RESULT_MAP + std::string(taskId);
    // check result set
    std::string res_value_str;
    platon::getState(key_str, res_value_str);
    if (res_value_str.length() > 1) {
      platon::println("set_result-> set already. Can not reset again.");
      PLATON_EMIT_EVENT(start_calc_event, 0,
                        "set already. Can not reset again.");
      return;
    }

    // save result
    std::string status_str = toString(status);
    std::string data_str = std::string(data);
    std::string value_str = status_str + COMMON_SPLIT_CHAR + data_str;
    platon::println("save result, key: ", key_str, " value:", value_str);
    platon::setState(key_str, value_str);

    // divide the money. equal division.
    if (status != 1) { // 1 success 0 fail.
      platon::println("set_result-> status must equal 1.");
      PLATON_EMIT_EVENT(start_calc_event, 0, "status must equal 1.");
      return;
    }
    platon::u256 amount_i = get_saved_amount(taskId);
    const char *partners_c = get_participants();
    std::string partner_str = std::string(partners_c);
    std::vector<std::string> partner_vec =
        split(partner_str, COMMON_SPLIT_CHAR);

    platon::u256 count_i(partner_vec.size());

    platon::println("part per:", count_i.convert_to<std::string>());
    platon::u256 each_one_i = amount_i / count_i;
    platon::println("avg :", each_one_i.convert_to<std::string>());

    // transfer to partner
    for (unsigned int i = 0; i < partner_vec.size(); ++i) {
      std::string p_str = partner_vec[i];
      platon::println("transfer to:", p_str,
                      " value:", each_one_i.convert_to<std::string>());
      platon::Address _addr(p_str, true);
      platon::callTransfer(_addr, each_one_i);
    }
    platon::println("Set result success.");
    PLATON_EMIT_EVENT(set_result_event, 1, "Setting result success.");
  }

  /// k1:v1,k2:v2,k3:v3
  void set_fees(const char *fees) {
    platon::println("into set_fees...");
    PLATON_EMIT_EVENT(set_fees_event, 1, "set fees done.");
  }

  const char *get_ir_data() const {
    std::string irdata;
    platon::getState(KEY_IR, irdata);
    return irdata.c_str();
  }

  const char *get_participants() const {
    std::string parties;
    platon::getState(KEY_PARTIES, parties);
    platon::println("get_participants:", parties);
    return parties.c_str();
  }

  const char *get_urls() const {
    std::string urls;
    platon::getState(KEY_URLS, urls);
    return urls.c_str();
  }

  const char *get_url_by_id(const char *id) const {
    std::string url;
    std::string key_str = KEY_URLS + std::string(id);
    platon::getState(key_str, url);
    return url.c_str();
  }

  const char *get_result(const char *task_id) const {
    std::string id_str = std::string(task_id);
    std::string key_str = PREFIX_RESULT_MAP + std::string(id_str);
    std::string result;
    platon::getState(key_str, result);
    // std::string value_str = status_str + COMMON_SPLIT_CHAR + data_str;
    std::vector<std::string> partner_vec = split(result, COMMON_SPLIT_CHAR);
    if (partner_vec.size() != 2) {
      return "";
    }
    return partner_vec[1].c_str();
  }

  uint64_t get_status(const char *task_id) const {
    std::string id_str = std::string(task_id);
    std::string key_str = PREFIX_RESULT_MAP + std::string(id_str);
    std::string result;
    platon::getState(key_str, result);
    std::vector<std::string> partner_vec = split(result, COMMON_SPLIT_CHAR);
    if (partner_vec.size() != 2) {
      return 0;
    }
    uint64_t st = stouint64(partner_vec[0]);
    return st;
  }

  const char *get_fee(const char *method) const {
    platon::u256 fee;
    std::string key_str = KEY_METHOD_PRICE + std::string(method);
    platon::getState(key_str, fee);
    platon::println("call get_fee. - ", fee.convert_to<std::string>());
    return fee.convert_to<std::string>().c_str();
  }

  const char *get_invitor() const {
    std::string invitor;
    platon::getState(KEY_INVITORS, invitor);
    return invitor.c_str();
  }

private:
  std::string gen_task_id() const {
    uint64_t nonce_i = getCallerNonce();
    std::string nonce_str = toString(nonce_i);
    platon::h160 caller_h = platon::caller();
    std::string caller_h_str = caller_h.toString();
    platon::println("get nonce: ", nonce_str);
    platon::println("get caller_h_str: ", caller_h_str);
    std::string src_str = nonce_str + caller_h_str;
    char *t_src;
    strcpy(t_src, src_str.c_str());

    platon::h256 sha3_h = platon::sha3((platon::byte *)t_src, strlen(t_src));
    std::string sha3_h_str = sha3_h.toString();
    platon::println("task id : ", sha3_h_str);
    return sha3_h_str;
  }

  bool is_partner() {
    platon::h160 caller_h = platon::caller();
    std::string caller_h_str = caller_h.toString();
    std::string partner_str;
    platon::getState(KEY_PARTIES, partner_str);
    platon::println("Participator :", partner_str);
    platon::println("Caller :", caller_h_str);
    std::string::size_type idx = caller_h_str.find("0x");
    if (idx == std::string::npos) {
      caller_h_str = "0x" + caller_h_str;
    }
    platon::println("Caller End:", caller_h_str);
    std::vector<std::string> partner_vec =
        split(partner_str, COMMON_SPLIT_CHAR);
    for (unsigned int i = 0; i < partner_vec.size(); ++i) {
      platon::println("v_caller:", partner_vec[i]);
      if (strcmp(caller_h_str.c_str(), partner_vec[i].c_str()) == 0) {
        return true;
      }
    }
    return false;
  }

  /// blance is engouth for caller to pay the method's price.
  bool is_enough_price(const char *method) {
    // the price of method.
    platon::u256 fee;
    std::string key_str = KEY_METHOD_PRICE + std::string(method);
    platon::println("is_enough_price : key_str", key_str);
    platon::getState(key_str, fee);
    platon::println("is_enough_price:call get_fee. - ",
                    fee.convert_to<std::string>());
    // the pricee of value to caller.
    platon::u256 _value = platon::callValue();
    platon::println("is_enough_price:call get_value. - ",
                    _value.convert_to<std::string>());
    if (_value >= fee) {
      platon::println("is_enough_price: return true.");
      return true;
    }
    platon::println("is_enough_price: return false.");
    return false;
  }

  /// transfer of value, from user's account to contract's account.
  bool save_allot_amount(const char *task_id) {
    // platon::balance().convert_to<std::string>().c_str();
    platon::u256 value_u = platon::callValue();
    std::string key_str = PREFIX_ALLOT_MAP + std::string(task_id);

    std::string value_str = value_u.convert_to<std::string>();
    platon::println("save_allot_amount: ", key_str, " - ", value_str);
    platon::setState(key_str, value_u);
    return true;
  }

  platon::u256 get_saved_amount(const char *task_id) {
    std::string key_str = PREFIX_ALLOT_MAP + std::string(task_id);
    platon::u256 value_u;
    platon::getState(key_str, value_u);
    platon::println("get_saved_amout: ", value_u.convert_to<std::string>());
    return value_u;
  }

  void init_set_urls() {
    // URLS_VALUE -> "id01$tcpSession:tcp -p 9527,id02$tcpSession:tcp -p
    // 9527,id03$tcpSession:tcp -p 9527"
    char *values = URLS_VALUE;
    char *pattern = ",";
    // ["id01$tcpSession:tcp -p 9527", "id02$tcpSession:tcp -p 9527",
    // "id03$tcpSession:tcp -p 9527"] KEY_URLS + "id01" -> tcpSession:tcp -p
    // 9527
    platon::println("---- begin split ------");
    std::vector<std::string> arr = split(values, pattern);
    for (unsigned int i = 0; i < arr.size(); ++i) {
      char *trim_res = new char[100];
      char *str_in = new char[100];
      strcpy(str_in, arr[i].c_str());

      str_trim(str_in, trim_res);

      std::vector<std::string> id_valule_arr = split(str_in, "$");
      if (id_valule_arr.size() != 2) {
        platon::println("Invalid value str of urls.");
        platon::platonThrow("Invalid value str of urls.");
      }
      // do set state
      std::string _key = KEY_URLS + id_valule_arr[0];
      std::string _value = id_valule_arr[1];
      platon::println("init urls, key : ", _key, " , values: ", _value);
      platon::setState(_key, _value);
      delete[] str_in;
      delete[] trim_res;
    }
  }

  void init_set_price() {
    // METHOD_PRICE_VALUE ->
    // "func01$10000000000000000,func02$200000000000000,func03$4000000000000000000000000000"
    char *values = METHOD_PRICE_VALUE;
    char *pattern = ",";
    // ["func01$10000000000000000", "func01$10000000000000000",
    // "func01$10000000000000000"] PREFIX_METHOD_MAP + "func01" ->
    // 10000000000000000
    platon::println("---- Begin split price ------");

    std::vector<std::string> arr = split(values, pattern);
    platon::println("---- End split price ------", arr.size());
    for (unsigned int i = 0; i < arr.size(); ++i) {
      char *trim_res = new char[100];
      char *str_in = new char[100];
      strcpy(str_in, arr[i].c_str());
      str_trim(str_in, trim_res);

      std::vector<std::string> id_valule_arr = split(str_in, "$");
      if (id_valule_arr.size() != 2) {
        platon::println("Invalid value str of price.");
        platon::platonThrow("Invalid value str of price.");
      }
      // do set state
      std::string key_str = KEY_METHOD_PRICE + id_valule_arr[0];
      std::string value_str = id_valule_arr[1];
      platon::println("init price, key : ", key_str, " , values: ", value_str);
      platon::u256 value_u(value_str);
      platon::setState(key_str, value_u);
      delete[] str_in;
      delete[] trim_res;
    }
  }

private:
  uint64_t stouint64(const std::string &num) const {
    uint64_t res = 0;
    for (size_t i = 0; i < num.length(); i++) {
      res = res * 10 + (num[i] - '0');
    }
    platon::println("stouint64 ", num, "->", res);
    return res;
  }

  std::string toString(uint64_t num) const {
    std::string res;
    while (num != 0) {
      char c = num % 10 + '0';
      num /= 10;
      res.insert(0, 1, c);
    }
    platon::println("toString ", num, "->", res);
    return res;
  }

  std::vector<std::string> split(const std::string &str,
                                 const std::string &pattern) const {
    // const char* convert to char*
    char *strc = new char[std::strlen(str.c_str()) + 1];
    strcpy(strc, str.c_str());
    std::vector<std::string> result_vec;
    char *tmp_str = strtok(strc, pattern.c_str());
    while (tmp_str != NULL) {
      result_vec.push_back(std::string(tmp_str));
      tmp_str = strtok(NULL, pattern.c_str());
    }
    delete[] strc;
    return result_vec;
  }

  void str_trim(char *str_in, char *str_out) {
    int i, j;
    i = 0;
    j = strlen(str_in) - 1;
    while (str_in[i] == ' ') {
      i++;
    }
    while (str_in[j] == ' ') {
      --j;
    }
    strncpy(str_out, str_in + i, j - i + 1);
    str_out[j - i + 1] = '\0'; // end flag
  }
};
} // namespace mpc

PLATON_ABI(mpc::MPC, TestPerfAdd);
PLATON_ABI(mpc::MPC, TestPerfSub);
PLATON_ABI(mpc::MPC, TestPerfMul);
PLATON_ABI(mpc::MPC, TestPerfDiv);
PLATON_ABI(mpc::MPC, TestPerfMod);
PLATON_ABI(mpc::MPC, TestPerfAnd);
PLATON_ABI(mpc::MPC, TestPerfOrr);
PLATON_ABI(mpc::MPC, TestPerfEor);
PLATON_ABI(mpc::MPC, TestPerfAll);
PLATON_ABI(mpc::MPC, start_calc);
PLATON_ABI(mpc::MPC, get_owner);
PLATON_ABI(mpc::MPC, set_result);
PLATON_ABI(mpc::MPC, get_ir_data);
PLATON_ABI(mpc::MPC, get_participants);
PLATON_ABI(mpc::MPC, get_urls);
PLATON_ABI(mpc::MPC, get_result);
PLATON_ABI(mpc::MPC, get_status);
PLATON_ABI(mpc::MPC, get_fee);
PLATON_ABI(mpc::MPC, get_invitor);
PLATON_ABI(mpc::MPC, get_url_by_id);

#endif