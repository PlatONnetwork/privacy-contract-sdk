// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleProtoLite2.proto

#ifndef PROTOBUF_SimpleProtoLite2_2eproto__INCLUDED
#define PROTOBUF_SimpleProtoLite2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_SimpleProtoLite2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsFooImpl();
void InitDefaultsFoo();
void InitDefaultsBarImpl();
void InitDefaultsBar();
inline void InitDefaults() {
  InitDefaultsFoo();
  InitDefaultsBar();
}
}  // namespace protobuf_SimpleProtoLite2_2eproto
namespace simpleproto2 {
class Bar;
class BarDefaultTypeInternal;
extern BarDefaultTypeInternal _Bar_default_instance_;
class Foo;
class FooDefaultTypeInternal;
extern FooDefaultTypeInternal _Foo_default_instance_;
}  // namespace simpleproto2
namespace simpleproto2 {

// ===================================================================

class Foo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:simpleproto2.Foo) */ {
 public:
  Foo();
  virtual ~Foo();

  Foo(const Foo& from);

  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Foo(Foo&& from) noexcept
    : Foo() {
    *this = ::std::move(from);
  }

  inline Foo& operator=(Foo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Foo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Foo* internal_default_instance() {
    return reinterpret_cast<const Foo*>(
               &_Foo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Foo* other);
  friend void swap(Foo& a, Foo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Foo* New() const PROTOBUF_FINAL { return New(NULL); }

  Foo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Foo& from);
  void MergeFrom(const Foo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Foo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string s = 3;
  void clear_s();
  static const int kSFieldNumber = 3;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // int32 i32 = 1;
  void clear_i32();
  static const int kI32FieldNumber = 1;
  ::google::protobuf::int32 i32() const;
  void set_i32(::google::protobuf::int32 value);

  // float f = 2;
  void clear_f();
  static const int kFFieldNumber = 2;
  float f() const;
  void set_f(float value);

  // @@protoc_insertion_point(class_scope:simpleproto2.Foo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  ::google::protobuf::int32 i32_;
  float f_;
  mutable int _cached_size_;
  friend struct ::protobuf_SimpleProtoLite2_2eproto::TableStruct;
  friend void ::protobuf_SimpleProtoLite2_2eproto::InitDefaultsFooImpl();
};
// -------------------------------------------------------------------

class Bar : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:simpleproto2.Bar) */ {
 public:
  Bar();
  virtual ~Bar();

  Bar(const Bar& from);

  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bar(Bar&& from) noexcept
    : Bar() {
    *this = ::std::move(from);
  }

  inline Bar& operator=(Bar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Bar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bar* internal_default_instance() {
    return reinterpret_cast<const Bar*>(
               &_Bar_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Bar* other);
  friend void swap(Bar& a, Bar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bar* New() const PROTOBUF_FINAL { return New(NULL); }

  Bar* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Bar& from);
  void MergeFrom(const Bar& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .simpleproto2.Foo foo = 1;
  bool has_foo() const;
  void clear_foo();
  static const int kFooFieldNumber = 1;
  const ::simpleproto2::Foo& foo() const;
  ::simpleproto2::Foo* release_foo();
  ::simpleproto2::Foo* mutable_foo();
  void set_allocated_foo(::simpleproto2::Foo* foo);

  // int32 i32 = 2;
  void clear_i32();
  static const int kI32FieldNumber = 2;
  ::google::protobuf::int32 i32() const;
  void set_i32(::google::protobuf::int32 value);

  // float f = 3;
  void clear_f();
  static const int kFFieldNumber = 3;
  float f() const;
  void set_f(float value);

  // @@protoc_insertion_point(class_scope:simpleproto2.Bar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::simpleproto2::Foo* foo_;
  ::google::protobuf::int32 i32_;
  float f_;
  mutable int _cached_size_;
  friend struct ::protobuf_SimpleProtoLite2_2eproto::TableStruct;
  friend void ::protobuf_SimpleProtoLite2_2eproto::InitDefaultsBarImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Foo

// int32 i32 = 1;
inline void Foo::clear_i32() {
  i32_ = 0;
}
inline ::google::protobuf::int32 Foo::i32() const {
  // @@protoc_insertion_point(field_get:simpleproto2.Foo.i32)
  return i32_;
}
inline void Foo::set_i32(::google::protobuf::int32 value) {
  
  i32_ = value;
  // @@protoc_insertion_point(field_set:simpleproto2.Foo.i32)
}

// float f = 2;
inline void Foo::clear_f() {
  f_ = 0;
}
inline float Foo::f() const {
  // @@protoc_insertion_point(field_get:simpleproto2.Foo.f)
  return f_;
}
inline void Foo::set_f(float value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:simpleproto2.Foo.f)
}

// string s = 3;
inline void Foo::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Foo::s() const {
  // @@protoc_insertion_point(field_get:simpleproto2.Foo.s)
  return s_.GetNoArena();
}
inline void Foo::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simpleproto2.Foo.s)
}
#if LANG_CXX11
inline void Foo::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simpleproto2.Foo.s)
}
#endif
inline void Foo::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simpleproto2.Foo.s)
}
inline void Foo::set_s(const char* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simpleproto2.Foo.s)
}
inline ::std::string* Foo::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:simpleproto2.Foo.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Foo::release_s() {
  // @@protoc_insertion_point(field_release:simpleproto2.Foo.s)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Foo::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:simpleproto2.Foo.s)
}

// -------------------------------------------------------------------

// Bar

// .simpleproto2.Foo foo = 1;
inline bool Bar::has_foo() const {
  return this != internal_default_instance() && foo_ != NULL;
}
inline void Bar::clear_foo() {
  if (GetArenaNoVirtual() == NULL && foo_ != NULL) {
    delete foo_;
  }
  foo_ = NULL;
}
inline const ::simpleproto2::Foo& Bar::foo() const {
  const ::simpleproto2::Foo* p = foo_;
  // @@protoc_insertion_point(field_get:simpleproto2.Bar.foo)
  return p != NULL ? *p : *reinterpret_cast<const ::simpleproto2::Foo*>(
      &::simpleproto2::_Foo_default_instance_);
}
inline ::simpleproto2::Foo* Bar::release_foo() {
  // @@protoc_insertion_point(field_release:simpleproto2.Bar.foo)
  
  ::simpleproto2::Foo* temp = foo_;
  foo_ = NULL;
  return temp;
}
inline ::simpleproto2::Foo* Bar::mutable_foo() {
  
  if (foo_ == NULL) {
    foo_ = new ::simpleproto2::Foo;
  }
  // @@protoc_insertion_point(field_mutable:simpleproto2.Bar.foo)
  return foo_;
}
inline void Bar::set_allocated_foo(::simpleproto2::Foo* foo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete foo_;
  }
  if (foo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      foo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, foo, submessage_arena);
    }
    
  } else {
    
  }
  foo_ = foo;
  // @@protoc_insertion_point(field_set_allocated:simpleproto2.Bar.foo)
}

// int32 i32 = 2;
inline void Bar::clear_i32() {
  i32_ = 0;
}
inline ::google::protobuf::int32 Bar::i32() const {
  // @@protoc_insertion_point(field_get:simpleproto2.Bar.i32)
  return i32_;
}
inline void Bar::set_i32(::google::protobuf::int32 value) {
  
  i32_ = value;
  // @@protoc_insertion_point(field_set:simpleproto2.Bar.i32)
}

// float f = 3;
inline void Bar::clear_f() {
  f_ = 0;
}
inline float Bar::f() const {
  // @@protoc_insertion_point(field_get:simpleproto2.Bar.f)
  return f_;
}
inline void Bar::set_f(float value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:simpleproto2.Bar.f)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simpleproto2

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SimpleProtoLite2_2eproto__INCLUDED
