// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `platon_mpc_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.platon.vm.slice.platon.service;

public abstract class _NodeChannelSessionDisp extends Ice.ObjectImpl implements NodeChannelSession
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::platon::service::NodeChannelSession"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void error(String taskId, net.platon.vm.slice.platon.MPCRole role, String from, net.platon.vm.slice.platon.ErrorEnum error)
    {
        error(taskId, role, from, error, null);
    }

    public final void input(byte[] data)
    {
        input(data, null);
    }

    public final void inputData(String taskId, String fromUser, byte[] data)
    {
        inputData(taskId, fromUser, data, null);
    }

    public final void invite(TaskParams taskparams, net.platon.vm.slice.platon.callback.NodeCallbackPrx cb)
    {
        invite(taskparams, cb, null);
    }

    public final int invite2(TaskParams taskparams)
    {
        return invite2(taskparams, null);
    }

    public final void _notify(TaskParams taskparams, net.platon.vm.slice.platon.callback.NodeCallbackPrx cb)
    {
        _notify(taskparams, cb, null);
    }

    public final int notify2(TaskParams taskparams)
    {
        return notify2(taskparams, null);
    }

    public final void ready(TaskParams taskparams, net.platon.vm.slice.platon.callback.NodeCallbackPrx cb)
    {
        ready(taskparams, cb, null);
    }

    public static Ice.DispatchStatus ___invite(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskParams taskparams = null;
        net.platon.vm.slice.platon.callback.NodeCallbackPrx cb;
        taskparams = TaskParams.__read(__is, taskparams);
        cb = net.platon.vm.slice.platon.callback.NodeCallbackPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.invite(taskparams, cb, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___notify(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskParams taskparams = null;
        net.platon.vm.slice.platon.callback.NodeCallbackPrx cb;
        taskparams = TaskParams.__read(__is, taskparams);
        cb = net.platon.vm.slice.platon.callback.NodeCallbackPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj._notify(taskparams, cb, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___invite2(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskParams taskparams = null;
        taskparams = TaskParams.__read(__is, taskparams);
        __inS.endReadParams();
        int __ret = __obj.invite2(taskparams, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___notify2(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskParams taskparams = null;
        taskparams = TaskParams.__read(__is, taskparams);
        __inS.endReadParams();
        int __ret = __obj.notify2(taskparams, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___ready(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        TaskParams taskparams = null;
        net.platon.vm.slice.platon.callback.NodeCallbackPrx cb;
        taskparams = TaskParams.__read(__is, taskparams);
        cb = net.platon.vm.slice.platon.callback.NodeCallbackPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.ready(taskparams, cb, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___inputData(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String taskId;
        String fromUser;
        byte[] data;
        taskId = __is.readString();
        fromUser = __is.readString();
        data = net.platon.vm.slice.platon.ByteListHelper.read(__is);
        __inS.endReadParams();
        __obj.inputData(taskId, fromUser, data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___input(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte[] data;
        data = net.platon.vm.slice.platon.ByteListHelper.read(__is);
        __inS.endReadParams();
        __obj.input(data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___error(NodeChannelSession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String taskId;
        net.platon.vm.slice.platon.MPCRole role;
        String from;
        net.platon.vm.slice.platon.ErrorEnum error;
        taskId = __is.readString();
        role = net.platon.vm.slice.platon.MPCRole.__read(__is);
        from = __is.readString();
        error = net.platon.vm.slice.platon.ErrorEnum.__read(__is);
        __inS.endReadParams();
        __obj.error(taskId, role, from, error, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "error",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "input",
        "inputData",
        "invite",
        "invite2",
        "notify",
        "notify2",
        "ready"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___error(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___input(this, in, __current);
            }
            case 6:
            {
                return ___inputData(this, in, __current);
            }
            case 7:
            {
                return ___invite(this, in, __current);
            }
            case 8:
            {
                return ___invite2(this, in, __current);
            }
            case 9:
            {
                return ___notify(this, in, __current);
            }
            case 10:
            {
                return ___notify2(this, in, __current);
            }
            case 11:
            {
                return ___ready(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
