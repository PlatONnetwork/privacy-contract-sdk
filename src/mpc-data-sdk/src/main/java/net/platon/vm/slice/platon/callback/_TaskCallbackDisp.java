// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `platon_mpc_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.platon.vm.slice.platon.callback;

public abstract class _TaskCallbackDisp extends Ice.ObjectImpl implements TaskCallback
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::platon::callback::TaskCallback"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void error(MpcRequest request, net.platon.vm.slice.platon.ErrorEnum error)
    {
        error(request, error, null);
    }

    public final net.platon.vm.slice.platon.ErrorEnum inputData(MpcRequest request, net.platon.vm.slice.platon.ByteListHolder data, net.platon.vm.slice.platon.ByteListHolder data_default)
    {
        return inputData(request, data, data_default, null);
    }

    public final void result(MpcRequest request, byte[] data)
    {
        result(request, data, null);
    }

    public static Ice.DispatchStatus ___error(TaskCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MpcRequest request = null;
        net.platon.vm.slice.platon.ErrorEnum error;
        request = MpcRequest.__read(__is, request);
        error = net.platon.vm.slice.platon.ErrorEnum.__read(__is);
        __inS.endReadParams();
        __obj.error(request, error, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___inputData(TaskCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MpcRequest request = null;
        request = MpcRequest.__read(__is, request);
        __inS.endReadParams();
        net.platon.vm.slice.platon.ByteListHolder data = new net.platon.vm.slice.platon.ByteListHolder();
        net.platon.vm.slice.platon.ByteListHolder data_default = new net.platon.vm.slice.platon.ByteListHolder();
        net.platon.vm.slice.platon.ErrorEnum __ret = __obj.inputData(request, data, data_default, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        net.platon.vm.slice.platon.ByteListHelper.write(__os, data.value);
        net.platon.vm.slice.platon.ByteListHelper.write(__os, data_default.value);
        net.platon.vm.slice.platon.ErrorEnum.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___result(TaskCallback __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        MpcRequest request = null;
        byte[] data;
        request = MpcRequest.__read(__is, request);
        data = net.platon.vm.slice.platon.ByteListHelper.read(__is);
        __inS.endReadParams();
        __obj.result(request, data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "error",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "inputData",
        "result"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___error(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___inputData(this, in, __current);
            }
            case 6:
            {
                return ___result(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
