// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `jugo_proxy_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.platon.vm.slice.proxy.service;

public abstract class _ProxySessionDisp extends Ice.ObjectImpl implements ProxySession
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::service::ProxySession"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[2];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[2];
    }

    public static String ice_staticId()
    {
        return __ids[2];
    }

    /**
     * Destroy the session. This is called automatically when the router is destroyed.
     *
     **/
    public final void destroy()
    {
        destroy(null);
    }

    public final void forward_async(AMD_ProxySession_forward __cb, String taskId, String fromUser, String toUser, byte[] data)
        throws net.platon.vm.slice.common.RpcException
    {
        forward_async(__cb, taskId, fromUser, toUser, data, null);
    }

    public final void invite_async(AMD_ProxySession_invite __cb, String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args)
        throws net.platon.vm.slice.common.RpcException
    {
        invite_async(__cb, roomId, algorithmId, starter, takerList, resultReceiverList, args, null);
    }

    public final void result_async(AMD_ProxySession_result __cb, String taskId, int code, byte[] data)
        throws net.platon.vm.slice.common.RpcException
    {
        result_async(__cb, taskId, code, data, null);
    }

    public final void setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo)
        throws net.platon.vm.slice.common.RpcException
    {
        setNodeCallback(cb, nodeCommunicateInfo, null);
    }

    public static Ice.DispatchStatus ___setNodeCallback(ProxySession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        net.platon.vm.slice.node.callback.NodeCallbackPrx cb;
        net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo = null;
        cb = net.platon.vm.slice.node.callback.NodeCallbackPrxHelper.__read(__is);
        nodeCommunicateInfo = net.platon.vm.slice.common.NodeCommunicateInfo.__read(__is, nodeCommunicateInfo);
        __inS.endReadParams();
        try
        {
            __obj.setNodeCallback(cb, nodeCommunicateInfo, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(net.platon.vm.slice.common.RpcException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___invite(ProxySession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String roomId;
        String algorithmId;
        String starter;
        String[] takerList;
        String[] resultReceiverList;
        String[] args;
        roomId = __is.readString();
        algorithmId = __is.readString();
        starter = __is.readString();
        takerList = net.platon.vm.slice.common.StringListHelper.read(__is);
        resultReceiverList = net.platon.vm.slice.common.StringListHelper.read(__is);
        args = net.platon.vm.slice.common.StringListHelper.read(__is);
        __inS.endReadParams();
        _AMD_ProxySession_invite __cb = new _AMD_ProxySession_invite(__inS);
        try
        {
            __obj.invite_async(__cb, roomId, algorithmId, starter, takerList, resultReceiverList, args, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___forward(ProxySession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String taskId;
        String fromUser;
        String toUser;
        byte[] data;
        taskId = __is.readString();
        fromUser = __is.readString();
        toUser = __is.readString();
        data = net.platon.vm.slice.common.ByteListHelper.read(__is);
        __inS.endReadParams();
        _AMD_ProxySession_forward __cb = new _AMD_ProxySession_forward(__inS);
        try
        {
            __obj.forward_async(__cb, taskId, fromUser, toUser, data, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___result(ProxySession __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String taskId;
        int code;
        byte[] data;
        taskId = __is.readString();
        code = __is.readInt();
        data = net.platon.vm.slice.common.ByteListHelper.read(__is);
        __inS.endReadParams();
        _AMD_ProxySession_result __cb = new _AMD_ProxySession_result(__inS);
        try
        {
            __obj.result_async(__cb, taskId, code, data, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "destroy",
        "forward",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "invite",
        "result",
        "setNodeCallback"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return Glacier2._SessionDisp.___destroy(this, in, __current);
            }
            case 1:
            {
                return ___forward(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___invite(this, in, __current);
            }
            case 7:
            {
                return ___result(this, in, __current);
            }
            case 8:
            {
                return ___setNodeCallback(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
