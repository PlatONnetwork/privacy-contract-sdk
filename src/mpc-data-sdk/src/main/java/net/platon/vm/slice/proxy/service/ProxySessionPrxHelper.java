// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `jugo_proxy_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.platon.vm.slice.proxy.service;

/**
 * Provides type-specific helper functions.
 **/
public final class ProxySessionPrxHelper extends Ice.ObjectPrxHelperBase implements ProxySessionPrx
{
    private static final String __destroy_name = "destroy";

    public void destroy()
    {
        destroy(null, false);
    }

    public void destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_destroy(begin_destroy(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, false, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Glacier2.Callback_Session_destroy __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, 
                             __explicitCtx, 
                             __synchronous, 
                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__destroy_name, __cb);
        try
        {
            __result.prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_destroy(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __destroy_name);
    }

    private static final String __forward_name = "forward";

    public void forward(String taskId, String fromUser, String toUser, byte[] data)
        throws net.platon.vm.slice.common.RpcException
    {
        forward(taskId, fromUser, toUser, data, null, false);
    }

    public void forward(String taskId, String fromUser, String toUser, byte[] data, java.util.Map<String, String> __ctx)
        throws net.platon.vm.slice.common.RpcException
    {
        forward(taskId, fromUser, toUser, data, __ctx, true);
    }

    private void forward(String taskId, String fromUser, String toUser, byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws net.platon.vm.slice.common.RpcException
    {
        __checkTwowayOnly(__forward_name);
        end_forward(begin_forward(taskId, fromUser, toUser, data, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_forward(String taskId, String fromUser, String toUser, byte[] data)
    {
        return begin_forward(taskId, fromUser, toUser, data, null, false, false, null);
    }

    public Ice.AsyncResult begin_forward(String taskId, String fromUser, String toUser, byte[] data, java.util.Map<String, String> __ctx)
    {
        return begin_forward(taskId, fromUser, toUser, data, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_forward(String taskId, String fromUser, String toUser, byte[] data, Ice.Callback __cb)
    {
        return begin_forward(taskId, fromUser, toUser, data, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_forward(String taskId, String fromUser, String toUser, byte[] data, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_forward(taskId, fromUser, toUser, data, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_forward(String taskId, String fromUser, String toUser, byte[] data, Callback_ProxySession_forward __cb)
    {
        return begin_forward(taskId, fromUser, toUser, data, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_forward(String taskId, String fromUser, String toUser, byte[] data, java.util.Map<String, String> __ctx, Callback_ProxySession_forward __cb)
    {
        return begin_forward(taskId, fromUser, toUser, data, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_forward(String taskId, 
                                         String fromUser, 
                                         String toUser, 
                                         byte[] data, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_forward(taskId, fromUser, toUser, data, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_forward(String taskId, 
                                         String fromUser, 
                                         String toUser, 
                                         byte[] data, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forward(taskId, fromUser, toUser, data, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_forward(String taskId, 
                                         String fromUser, 
                                         String toUser, 
                                         byte[] data, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_forward(taskId, fromUser, toUser, data, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_forward(String taskId, 
                                         String fromUser, 
                                         String toUser, 
                                         byte[] data, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forward(taskId, fromUser, toUser, data, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_forward(String taskId, 
                                          String fromUser, 
                                          String toUser, 
                                          byte[] data, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forward(taskId, fromUser, toUser, data, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         ProxySessionPrxHelper.__forward_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_forward(String taskId, 
                                          String fromUser, 
                                          String toUser, 
                                          byte[] data, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__forward_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__forward_name, __cb);
        try
        {
            __result.prepare(__forward_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskId);
            __os.writeString(fromUser);
            __os.writeString(toUser);
            net.platon.vm.slice.common.ByteListHelper.write(__os, data);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_forward(Ice.AsyncResult __iresult)
        throws net.platon.vm.slice.common.RpcException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __forward_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(net.platon.vm.slice.common.RpcException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __forward_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        net.platon.vm.slice.proxy.service.ProxySessionPrx __proxy = (net.platon.vm.slice.proxy.service.ProxySessionPrx)__result.getProxy();
        try
        {
            __proxy.end_forward(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __invite_name = "invite";

    public String invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args)
        throws net.platon.vm.slice.common.RpcException
    {
        return invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, null, false);
    }

    public String invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args, java.util.Map<String, String> __ctx)
        throws net.platon.vm.slice.common.RpcException
    {
        return invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, true);
    }

    private String invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws net.platon.vm.slice.common.RpcException
    {
        __checkTwowayOnly(__invite_name);
        return end_invite(begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, null, false, false, null);
    }

    public Ice.AsyncResult begin_invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args, java.util.Map<String, String> __ctx)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args, Ice.Callback __cb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args, Callback_ProxySession_invite __cb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_invite(String roomId, String algorithmId, String starter, String[] takerList, String[] resultReceiverList, String[] args, java.util.Map<String, String> __ctx, Callback_ProxySession_invite __cb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_invite(String roomId, 
                                        String algorithmId, 
                                        String starter, 
                                        String[] takerList, 
                                        String[] resultReceiverList, 
                                        String[] args, 
                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_invite(String roomId, 
                                        String algorithmId, 
                                        String starter, 
                                        String[] takerList, 
                                        String[] resultReceiverList, 
                                        String[] args, 
                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_invite(String roomId, 
                                        String algorithmId, 
                                        String starter, 
                                        String[] takerList, 
                                        String[] resultReceiverList, 
                                        String[] args, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_invite(String roomId, 
                                        String algorithmId, 
                                        String starter, 
                                        String[] takerList, 
                                        String[] resultReceiverList, 
                                        String[] args, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_invite(String roomId, 
                                         String algorithmId, 
                                         String starter, 
                                         String[] takerList, 
                                         String[] resultReceiverList, 
                                         String[] args, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_invite(roomId, algorithmId, starter, takerList, resultReceiverList, args, __ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        ProxySessionPrxHelper.__invite_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_invite(String roomId, 
                                         String algorithmId, 
                                         String starter, 
                                         String[] takerList, 
                                         String[] resultReceiverList, 
                                         String[] args, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__invite_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__invite_name, __cb);
        try
        {
            __result.prepare(__invite_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(roomId);
            __os.writeString(algorithmId);
            __os.writeString(starter);
            net.platon.vm.slice.common.StringListHelper.write(__os, takerList);
            net.platon.vm.slice.common.StringListHelper.write(__os, resultReceiverList);
            net.platon.vm.slice.common.StringListHelper.write(__os, args);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_invite(Ice.AsyncResult __iresult)
        throws net.platon.vm.slice.common.RpcException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __invite_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(net.platon.vm.slice.common.RpcException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __invite_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        net.platon.vm.slice.proxy.service.ProxySessionPrx __proxy = (net.platon.vm.slice.proxy.service.ProxySessionPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_invite(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __result_name = "result";

    public void result(String taskId, int code, byte[] data)
        throws net.platon.vm.slice.common.RpcException
    {
        result(taskId, code, data, null, false);
    }

    public void result(String taskId, int code, byte[] data, java.util.Map<String, String> __ctx)
        throws net.platon.vm.slice.common.RpcException
    {
        result(taskId, code, data, __ctx, true);
    }

    private void result(String taskId, int code, byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws net.platon.vm.slice.common.RpcException
    {
        __checkTwowayOnly(__result_name);
        end_result(begin_result(taskId, code, data, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_result(String taskId, int code, byte[] data)
    {
        return begin_result(taskId, code, data, null, false, false, null);
    }

    public Ice.AsyncResult begin_result(String taskId, int code, byte[] data, java.util.Map<String, String> __ctx)
    {
        return begin_result(taskId, code, data, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_result(String taskId, int code, byte[] data, Ice.Callback __cb)
    {
        return begin_result(taskId, code, data, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_result(String taskId, int code, byte[] data, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_result(taskId, code, data, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_result(String taskId, int code, byte[] data, Callback_ProxySession_result __cb)
    {
        return begin_result(taskId, code, data, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_result(String taskId, int code, byte[] data, java.util.Map<String, String> __ctx, Callback_ProxySession_result __cb)
    {
        return begin_result(taskId, code, data, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_result(String taskId, 
                                        int code, 
                                        byte[] data, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_result(taskId, code, data, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_result(String taskId, 
                                        int code, 
                                        byte[] data, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_result(taskId, code, data, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_result(String taskId, 
                                        int code, 
                                        byte[] data, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_result(taskId, code, data, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_result(String taskId, 
                                        int code, 
                                        byte[] data, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_result(taskId, code, data, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_result(String taskId, 
                                         int code, 
                                         byte[] data, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_result(taskId, code, data, __ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        ProxySessionPrxHelper.__result_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_result(String taskId, 
                                         int code, 
                                         byte[] data, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__result_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__result_name, __cb);
        try
        {
            __result.prepare(__result_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(taskId);
            __os.writeInt(code);
            net.platon.vm.slice.common.ByteListHelper.write(__os, data);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_result(Ice.AsyncResult __iresult)
        throws net.platon.vm.slice.common.RpcException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __result_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(net.platon.vm.slice.common.RpcException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __result_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        net.platon.vm.slice.proxy.service.ProxySessionPrx __proxy = (net.platon.vm.slice.proxy.service.ProxySessionPrx)__result.getProxy();
        try
        {
            __proxy.end_result(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __setNodeCallback_name = "setNodeCallback";

    public void setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo)
        throws net.platon.vm.slice.common.RpcException
    {
        setNodeCallback(cb, nodeCommunicateInfo, null, false);
    }

    public void setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, java.util.Map<String, String> __ctx)
        throws net.platon.vm.slice.common.RpcException
    {
        setNodeCallback(cb, nodeCommunicateInfo, __ctx, true);
    }

    private void setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws net.platon.vm.slice.common.RpcException
    {
        __checkTwowayOnly(__setNodeCallback_name);
        end_setNodeCallback(begin_setNodeCallback(cb, nodeCommunicateInfo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, null, false, false, null);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, java.util.Map<String, String> __ctx)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, Ice.Callback __cb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, Callback_ProxySession_setNodeCallback __cb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, java.util.Map<String, String> __ctx, Callback_ProxySession_setNodeCallback __cb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, 
                                                 net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, 
                                                 net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, 
                                                 net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, 
                                                 net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, 
                                                  net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_setNodeCallback(cb, nodeCommunicateInfo, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 ProxySessionPrxHelper.__setNodeCallback_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_setNodeCallback(net.platon.vm.slice.node.callback.NodeCallbackPrx cb, 
                                                  net.platon.vm.slice.common.NodeCommunicateInfo nodeCommunicateInfo, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setNodeCallback_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__setNodeCallback_name, __cb);
        try
        {
            __result.prepare(__setNodeCallback_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            net.platon.vm.slice.node.callback.NodeCallbackPrxHelper.__write(__os, cb);
            net.platon.vm.slice.common.NodeCommunicateInfo.__write(__os, nodeCommunicateInfo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_setNodeCallback(Ice.AsyncResult __iresult)
        throws net.platon.vm.slice.common.RpcException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __setNodeCallback_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(net.platon.vm.slice.common.RpcException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __setNodeCallback_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        net.platon.vm.slice.proxy.service.ProxySessionPrx __proxy = (net.platon.vm.slice.proxy.service.ProxySessionPrx)__result.getProxy();
        try
        {
            __proxy.end_setNodeCallback(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxySessionPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ProxySessionPrx.class, ProxySessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxySessionPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ProxySessionPrx.class, ProxySessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxySessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ProxySessionPrx.class, ProxySessionPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ProxySessionPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ProxySessionPrx.class, ProxySessionPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ProxySessionPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ProxySessionPrx.class, ProxySessionPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ProxySessionPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ProxySessionPrx.class, ProxySessionPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Glacier2::Session",
        "::Ice::Object",
        "::service::ProxySession"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[2];
    }

    public static void __write(IceInternal.BasicStream __os, ProxySessionPrx v)
    {
        __os.writeProxy(v);
    }

    public static ProxySessionPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ProxySessionPrxHelper result = new ProxySessionPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
