// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `platon_mpc_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.platon.vm.slice.platon.callback;

public class TransactionParams implements java.lang.Cloneable, java.io.Serializable
{
    public String task_id;

    public long gas_price;

    public long gas_limit;

    public long nonce;

    public String to_addr;

    public byte[] data;

    public int state;

    public TransactionParams()
    {
        task_id = "";
        to_addr = "";
    }

    public TransactionParams(String task_id, long gas_price, long gas_limit, long nonce, String to_addr, byte[] data, int state)
    {
        this.task_id = task_id;
        this.gas_price = gas_price;
        this.gas_limit = gas_limit;
        this.nonce = nonce;
        this.to_addr = to_addr;
        this.data = data;
        this.state = state;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TransactionParams _r = null;
        if(rhs instanceof TransactionParams)
        {
            _r = (TransactionParams)rhs;
        }

        if(_r != null)
        {
            if(task_id != _r.task_id)
            {
                if(task_id == null || _r.task_id == null || !task_id.equals(_r.task_id))
                {
                    return false;
                }
            }
            if(gas_price != _r.gas_price)
            {
                return false;
            }
            if(gas_limit != _r.gas_limit)
            {
                return false;
            }
            if(nonce != _r.nonce)
            {
                return false;
            }
            if(to_addr != _r.to_addr)
            {
                if(to_addr == null || _r.to_addr == null || !to_addr.equals(_r.to_addr))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(data, _r.data))
            {
                return false;
            }
            if(state != _r.state)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::platon::callback::TransactionParams");
        __h = IceInternal.HashUtil.hashAdd(__h, task_id);
        __h = IceInternal.HashUtil.hashAdd(__h, gas_price);
        __h = IceInternal.HashUtil.hashAdd(__h, gas_limit);
        __h = IceInternal.HashUtil.hashAdd(__h, nonce);
        __h = IceInternal.HashUtil.hashAdd(__h, to_addr);
        __h = IceInternal.HashUtil.hashAdd(__h, data);
        __h = IceInternal.HashUtil.hashAdd(__h, state);
        return __h;
    }

    public TransactionParams
    clone()
    {
        TransactionParams c = null;
        try
        {
            c = (TransactionParams)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(task_id);
        __os.writeLong(gas_price);
        __os.writeLong(gas_limit);
        __os.writeLong(nonce);
        __os.writeString(to_addr);
        net.platon.vm.slice.platon.ByteListHelper.write(__os, data);
        __os.writeInt(state);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        task_id = __is.readString();
        gas_price = __is.readLong();
        gas_limit = __is.readLong();
        nonce = __is.readLong();
        to_addr = __is.readString();
        data = net.platon.vm.slice.platon.ByteListHelper.read(__is);
        state = __is.readInt();
    }

    static public void
    __write(IceInternal.BasicStream __os, TransactionParams __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public TransactionParams
    __read(IceInternal.BasicStream __is, TransactionParams __v)
    {
        if(__v == null)
        {
             __v = new TransactionParams();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final TransactionParams __nullMarshalValue = new TransactionParams();

    public static final long serialVersionUID = -1114404213L;
}
