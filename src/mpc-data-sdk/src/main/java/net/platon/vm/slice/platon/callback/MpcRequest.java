// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `platon_mpc_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package net.platon.vm.slice.platon.callback;

public class MpcRequest implements java.lang.Cloneable, java.io.Serializable
{
    public String customer;

    public String task_id;

    public String ir_hash;

    public String method;

    public net.platon.vm.slice.platon.MPCRole role;

    public String[] peers;

    public MpcRequest()
    {
        customer = "";
        task_id = "";
        ir_hash = "";
        method = "";
        role = net.platon.vm.slice.platon.MPCRole.PART_ALICE;
    }

    public MpcRequest(String customer, String task_id, String ir_hash, String method, net.platon.vm.slice.platon.MPCRole role, String[] peers)
    {
        this.customer = customer;
        this.task_id = task_id;
        this.ir_hash = ir_hash;
        this.method = method;
        this.role = role;
        this.peers = peers;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MpcRequest _r = null;
        if(rhs instanceof MpcRequest)
        {
            _r = (MpcRequest)rhs;
        }

        if(_r != null)
        {
            if(customer != _r.customer)
            {
                if(customer == null || _r.customer == null || !customer.equals(_r.customer))
                {
                    return false;
                }
            }
            if(task_id != _r.task_id)
            {
                if(task_id == null || _r.task_id == null || !task_id.equals(_r.task_id))
                {
                    return false;
                }
            }
            if(ir_hash != _r.ir_hash)
            {
                if(ir_hash == null || _r.ir_hash == null || !ir_hash.equals(_r.ir_hash))
                {
                    return false;
                }
            }
            if(method != _r.method)
            {
                if(method == null || _r.method == null || !method.equals(_r.method))
                {
                    return false;
                }
            }
            if(role != _r.role)
            {
                if(role == null || _r.role == null || !role.equals(_r.role))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(peers, _r.peers))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::platon::callback::MpcRequest");
        __h = IceInternal.HashUtil.hashAdd(__h, customer);
        __h = IceInternal.HashUtil.hashAdd(__h, task_id);
        __h = IceInternal.HashUtil.hashAdd(__h, ir_hash);
        __h = IceInternal.HashUtil.hashAdd(__h, method);
        __h = IceInternal.HashUtil.hashAdd(__h, role);
        __h = IceInternal.HashUtil.hashAdd(__h, peers);
        return __h;
    }

    public MpcRequest
    clone()
    {
        MpcRequest c = null;
        try
        {
            c = (MpcRequest)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(customer);
        __os.writeString(task_id);
        __os.writeString(ir_hash);
        __os.writeString(method);
        net.platon.vm.slice.platon.MPCRole.__write(__os, role);
        net.platon.vm.slice.platon.StringListHelper.write(__os, peers);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        customer = __is.readString();
        task_id = __is.readString();
        ir_hash = __is.readString();
        method = __is.readString();
        role = net.platon.vm.slice.platon.MPCRole.__read(__is);
        peers = net.platon.vm.slice.platon.StringListHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, MpcRequest __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public MpcRequest
    __read(IceInternal.BasicStream __is, MpcRequest __v)
    {
        if(__v == null)
        {
             __v = new MpcRequest();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final MpcRequest __nullMarshalValue = new MpcRequest();

    public static final long serialVersionUID = -1939509038L;
}
